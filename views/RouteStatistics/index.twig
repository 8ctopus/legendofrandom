<!DOCTYPE html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@1/css/pico.min.css">
<style type="text/css">

:root {
  --line-height: 0.8;
}

@media (min-width: 1200px) {
  :root {
    --font-size: 18px;
  }
}

html {
  margin: 1rem 2rem;
}

a {
  text-decoration: underline;
}

td.status2xx {
  color: lime;
}

td.status3xx {
  color: yellow;
}

td.status4xx {
  color: orange;
}

td.status5xx {
  color: red;
}

div.header {
  margin: 1rem 0 2rem 0;
}

div.header .right {
  text-align: right;
}

div.header > * {
  margin-left: 1rem;
}

table[role=grid] tbody tr:hover {
  filter: brightness(1.5);
}

table[role=grid] tbody tr:hover:nth-child(odd) {
  filter: brightness(1.5);
}

</style>
<script type="text/javascript">

function setCookie(name, value, options = {}) {
  options = {
    path: '/',
    // add other defaults here if necessary
    ...options
  };

  if (options.expires instanceof Date) {
    options.expires = options.expires.toUTCString();
  }

  let updatedCookie = encodeURIComponent(name) + "=" + encodeURIComponent(value);

  for (let optionKey in options) {
    updatedCookie += "; " + optionKey;

    let optionValue = options[optionKey];

    if (optionValue !== true) {
      updatedCookie += "=" + optionValue;
    }
  }

  document.cookie = updatedCookie;
}

// send timezone to backend
const offset = new Date().getTimezoneOffset();
//const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone

setCookie('timezone', offset, {secure: true, 'max-age': 3600});

/**
 * Truncate statistics
 *
 * @return {void}
 */
function truncateStats() {
    fetch('{{ truncate }}', {
        method: 'POST',
    }).then(function(response) {
        if (response.status !== 200) {
            console.error('error: ' + response.status);
            return;
        }

        setTimeout(fn => { location.reload() }, 2000);
    }).catch(function(error) {
        console.error('fetch error: ', error);
    });
}

let timerId;

document.addEventListener('DOMContentLoaded', function () {
    // color status column in both tables
    colorStatus('#tableMostPopular tbody td:nth-child(4)');
    colorStatus('#tableMostPopularErrors tbody td:nth-child(4)');
    colorStatus('#tableLastRequests tbody td:nth-child(5)');

    // add tables filtering
    const tables = document.querySelectorAll('input.search');

    tables.forEach(function (table) {
      table.addEventListener('keyup', function (event) {
          if (timerId) {
              clearTimeout(timerId);
          }

          console.log(event.target.dataset.table);

          // wait before filtering
          timerId = setTimeout(filterTable(event.target.dataset.table, event.target.value), 300);
      });
    });
});

/**
 * Color status column inside table
 *
 * @param  {string} selector
 * @return {void}
 */
function colorStatus(selector) {
    const cells = document.querySelectorAll(selector);
    const length = cells.length;

    for (let i = 0; i < length; i++) {
        const status = parseInt(cells[i].innerHTML);
        let className;

        if (status < 200) {
            continue;
        } else if (status < 300) {
            className = 'status2xx';
        } else if (status < 400) {
            className = 'status3xx';
        } else if (status < 500) {
            className = 'status4xx';
        } else {
            className = 'status5xx';
        }

        cells[i].className = className;
    }
}

/**
 * Filter table records
 *
 * @param  {string} table
 * @param  {string} search
 * @return {void}
 */
function filterTable(table, search) {
    const rows = document.querySelectorAll(`#${table} tbody tr`);
    const length = rows.length;

    for (let i = 0; i < length; i++) {
        const text = rows[i].innerText;

        if (text.indexOf(search) === -1) {
            rows[i].style.display = 'none';
        } else {
            rows[i].style.display = '';
        }
    }
}

</script>
</head>
<body class="container-fluid">
<div class="header">
  <a href="#tableMostPopularErrors">errors</a>
  <a href="#tableLastRequests">last requests</a>
  <span data-tooltip="The pages that are cached by W3 total cache are not shown. (cached pages skip php). Store and gateway pages are not shown (do not go through the router). /wp/ pages are not shown (do not go through the router)">Important considerations</span>
  <div class="right">
    You are viewing {{ host }} <a href="{{ serverUri }}">
    Switch to {{ serverName }}</a> <a href="" onclick="truncateStats();">truncate stats</a>
  </div>
</div>

<div class="grid">
  <div>
    <h4> First request and total </h4>
    {{ include('table.twig', {table: tableCountAll, id: 'tableCountAll', search: false}, with_context = false) }}
  </div>

  <div>
    <h4> Requests in period </h4>
    {{ include('table.twig', {table: tableCount24, id: 'tableCount24', search: false}, with_context = false) }}
  </div>

  <div>
    <h4> Most active ips in the last 24 hours </h4>
    {{ include('table.twig', {table: tableMostPopularIps, id: 'tableMostPopularIps', search: false}, with_context = false) }}
  </div>
</div>

<h4> Most popular requests in the last 7 days </h4>
{{ include('table.twig', {table: tableMostPopular, id: 'tableMostPopular', search: true}, with_context = false) }}

<h4 id="tableMostPopularErrors"> Most popular errors in the last 7 days </h4>
{{ include('table.twig', {table: tableMostPopularErrors, id: 'tableMostPopularErrors', search: true}, with_context = false) }}

<h4 id="tableLastRequests"> Last 1000 requests </h4>
{{ include('table.twig', {table: tableLastRequests, id: 'tableLastRequests', search: true}, with_context = false) }}
