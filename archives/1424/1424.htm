<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>R4ndom’s Tutorial #16B: Self Modifying Code «  The Legend Of Random</title>
<meta name="generator" content="WordPress 3.5.1">
<meta name="robots" content="follow, all">

<link rel="shortcut icon" href="http://thelegendofrandom.com/blog/wp-content/themes/jarrah/favicon.ico">
<link rel="stylesheet" href="1424_fichiers/style.css" type="text/css" media="screen">
<link rel="alternate" type="application/rss+xml" title="The Legend Of Random RSS Feed" href="http://thelegendofrandom.com/blog/feed">
<link rel="pingback" href="http://thelegendofrandom.com/blog/xmlrpc.php">
<link rel="stylesheet" href="1424_fichiers/menu.css" type="text/css" media="screen">
<!--[if IE]><link rel="stylesheet" href="http://thelegendofrandom.com/blog/wp-content/themes/jarrah/css/ie.css" type="text/css" media="screen" /><![endif]-->

<link rel="alternate" type="application/rss+xml" title="The Legend Of Random » R4ndom’s Tutorial #16B: Self Modifying Code Comments Feed" href="http://thelegendofrandom.com/blog/archives/1424/feed">
<script type="text/javascript" src="1424_fichiers/jquery.js"></script>
<script type="text/javascript">
/* <![CDATA[ */
var MyAjax = {"ajaxurl":"http:\/\/thelegendofrandom.com\/blog\/wp-admin\/admin-ajax.php"};
/* ]]> */
</script>
<script type="text/javascript" src="1424_fichiers/ajax.js"></script>
<script type="text/javascript" src="1424_fichiers/comment-reply.js"></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://thelegendofrandom.com/blog/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://thelegendofrandom.com/blog/wp-includes/wlwmanifest.xml"> 
<link rel="prev" title="Modifying Binaries: The Never Ending Program" href="http://thelegendofrandom.com/blog/archives/1347">
<link rel="next" title="R4ndom’s Tutorial #17: Working With Delphi Binaries" href="http://thelegendofrandom.com/blog/archives/1472">
<meta name="generator" content="WordPress 3.5.1">
<link rel="canonical" href="http://thelegendofrandom.com/blog/archives/1424">
<link rel="shortlink" href="http://thelegendofrandom.com/blog/?p=1424">
	<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>
<style type="text/css" id="syntaxhighlighteranchor"></style>

<script type="text/javascript" src="1424_fichiers/jquery_002.js"></script>
<script type="text/javascript" src="1424_fichiers/jquery_004.js"></script>
<script type="text/javascript" src="1424_fichiers/jquery_003.js"></script>
<script type="text/javascript" src="1424_fichiers/my-menu.js"></script>

<!-- this product is released under General Public License. Please see the attached file for details. You can also find details about the license at http://www.opensource.org/licenses/gpl-license.php -->
<script type="text/javascript">
/* <![CDATA[ */

jQuery(document).ready(function(){ 
    jQuery(document).pngFix(); 
});

/* ]]> */ 
</script>

</head>

<body>

<div id="wrapper" align="center">
	<div id="layouttop"></div>
    
    <!-- Header Starts -->
    <div id="header">
    	<div id="headerleft">
        	              	<h1><a href="http://thelegendofrandom.com/blog">The Legend Of Random</a> </h1><h3>Programming and Reverse Engineering</h3>
			      	   
        </div>
        <div id="headerright">
        	<div id="searchboxo">
        		<form method="get" id="searchform" action="http://thelegendofrandom.com/blog/">
    <input value="Search keywords" name="s" id="searchbox" onfocus="this.value=''" class="searchinput" type="text">
    <input class="submitbutton" value="" type="submit">
</form> 
            </div>
        </div>
    </div>
    <!-- Header Ends -->

    
    
    <div id="innerwrapper">
    	
        <!-- Main nav Starts here -->
        <div id="navouter">
            <div id="nav">

                                <ul class="lavalamp" id="menu1">
                <li class="page_item "><a href="file:///Y:/thelegendofrandom.com/site/thelegendofrandom.com/blog/index.html">Home</a> </li>
                <li class="page_item page-item-2"><a href="file:///Y:/thelegendofrandom.com/site/thelegendofrandom.com/blog/sample-page.html">Tutorials</a> </li>
<li class="page_item page-item-27"><a href="file:///Y:/thelegendofrandom.com/site/thelegendofrandom.com/blog/tools.html">Tools</a> </li>
<li class="page_item page-item-153"><a href="file:///Y:/thelegendofrandom.com/site/thelegendofrandom.com/blog/contact-2.html">Contact</a> </li>
<li class="page_item page-item-846"><a href="http://www.thelegendofrandom.com/forum/">Forum</a> </li>
<li class="page_item page-item-1790"><a href="file:///Y:/thelegendofrandom.com/site/thelegendofrandom.com/blog/challenges.html">Challenges</a> </li>			
                
				<li style="left: 12px; width: 58px; overflow: hidden;" class="back"><div class="left"></div></li></ul>
            
            </div>
        </div>
        <!-- Main nav Ends -->
<div id="maincol">
		
        <div class="postwrap">
          	<h2 class="posttitle"><a href="http://thelegendofrandom.com/blog/archives/1424">R4ndom’s Tutorial #16B: Self Modifying Code</a> </h2>
          	<div class="postmeta">by <a href="http://thelegendofrandom.com/blog/archives/author/random" title="Posts by R4ndom" rel="author">R4ndom</a>  on Aug.03, 2012, under <a href="http://thelegendofrandom.com/blog/archives/category/beginner" title="View all posts in Beginner" rel="category tag">Beginner</a> , <a href="http://thelegendofrandom.com/blog/archives/category/reverse-engineering" title="View all posts in Reverse Engineering" rel="category tag">Reverse Engineering</a> , <a href="http://thelegendofrandom.com/blog/archives/category/tutorials" title="View all posts in Tutorials" rel="category tag">Tutorials</a> </div>
            <div class="clr16"></div>
          	<div class="postcontent"><p>In part two of this three part 
series we will go over self-modifying code and will eventually crack 
this binary. As promised, it will be challenging, but don’t worry if you
 don’t get everything- a lot is specific to this binary and you may 
never see again.</p>
<p>As always, the files you need are included with the download of this tutorial on the <span style="color: #0a77e1;"><a title="Tutorials" href="http://thelegendofrandom.com/blog/sample-page"><span style="text-decoration: underline; color: #0a77e1;">tutorials</span></a> </span></p> page.<p></p>
<p><span id="more-1424"></span></p>
<h2><span style="color: #0a77e1;">Understanding The App</span></h2>
<p>Now that we’ve seen how the basic message handler callback works, 
let’s see if we can use this to crack this crackme. We can see that 
there are really only three messages that this app handles; 110 
(INITDIALOG), 10 (DESTROY_WINDOW), and 111 (COMMAND). Any other messages
 are ignored. We’ve already gone through the init dialog code, and we 
don’t really care about the destroy window code, as that’s only called 
when we close the app. Therefore, anything worth noting happens in the 
WM_COMMAND section. So let’s only pause Olly in that section. Remove any
 old BPs and set a new one at address 40108e, or after the compare/jump 
for ID 111:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/138.png"><img class="aligncenter size-full wp-image-1313" title="Break at wm_command" src="1424_fichiers/138.png" alt="" height="222" width="653"></a> </p><p></p>
<p>and run the app. You will notice that now if you move the mouse over 
the window, resize it, move it, or anything that doesn’t involve 
clicking a button, Olly continues to run, as all of these messages are 
ignored. Now click on the first button, ’1′. Olly breaks at our BP. We 
can also see that the ARG.3 variable contains ’65′:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/227.png"><img class="aligncenter size-full wp-image-1314" title="The first button ID" src="1424_fichiers/227.png" alt="" height="110" width="258"></a> </p><p></p>
<p>If we were to open our crackme in Resource Hacker (from last 
tutorial) and open up the main dialog, you would see that 65 (or 101 in 
decimal) is the ID for the number ’1′ button:</p>
<div style="margin-bottom: 33em;"><span style="display: none;">.</span></div>
<p style="text-align: center;"><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/320.png"><img class="aligncenter  wp-image-1315" title="resource hacker" src="1424_fichiers/320.png" alt="" height="412" width="827"></a> </p><p></p>
<p>That is the ID that is in ARG.3! It is just the ID of the button. So 
we step down a couple lines and we see the compares begin, comparing the
 ID sent in with this message with the ID’s hard coded into the app:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/420.png"><img class="aligncenter size-full wp-image-1316" title="Comparing with the IDs" src="1424_fichiers/420.png" alt="" height="387" width="445"></a> </p><p></p>
<p>So, in the big picture, what this section is doing is checking the ID
 against all of the possible IDs, and when it finds a match, it calls to
 a section of code that handles that particular button. Notice also that
 right before the call, a value is pushed onto the stack; 1 for 0×65, 2 
for 0×66 etc. Since all of the calls are calling the same location, 
obviously the code at this section will differentiate which button that 
was clicked by what value is on the stack, again 1 for button 1, 2 for 
button 2 etc. So let’s single step until we perform the call, step in, 
and see what we have:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/58.png"><img class="aligncenter size-full wp-image-1318" title="The main function" src="1424_fichiers/58.png" alt="" height="426" width="465"></a> </p><p></p>
<p>Well now were into the meat of it! After setting up the stack we 
begin accessing the same memory locations we accessed in the 
WM_INITDIALOG section, namely starting at address 403038. So let’s open 
that up in the dump so we have a frame of reference:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/69.png"><img class="aligncenter size-full wp-image-1319" title="Showing the dump again" src="1424_fichiers/69.png" alt="" height="155" width="452"></a> </p><p></p>
<p>There’s our “DEAD” twice along with our 0x42s and the address 403000.
 Single stepping, we first move the 42s into ECX, and the two 0xDEADs 
into EBX and EAX:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/79.png"><img class="aligncenter size-full wp-image-1320" title="Loading the registers" src="1424_fichiers/79.png" alt="" height="92" width="169"></a> </p><p></p>
<p>Next, we do a series of compares to find out which button we pushed based on the value that was pushed onto the stack. Here, <strong>SS:[EBP+8]</strong> is directly accessing this pushed value. Since we clicked the first button, we will perform the first set of instructions:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/89.png"><img class="aligncenter size-full wp-image-1321" title="The first set" src="1424_fichiers/89.png" alt="" height="73" width="492"></a> </p><p></p>
<p><em>***One thing you can note: the author actually went through more 
trouble than he had to. He could have simply pushed the ARG.3 value 
which is the ID of the button and compared those IDs in this section, as
 opposed to pushing another value onto the stack and comparing those. 
Who knows, maybe the author assumed this was harder to read.***</em></p>
<p>The first thing we will do is add 0x54B to ECX (42424242) which gives
 us 4242478D. Next we multiply EAX by EBX (which is 0xDEAD times 0xDEAD)
 which gives us C1B080E9. Finally, we XOR the ECX register with the EAX 
register and jump to location 4013E7. Stepping over the jump lands us 
here:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/99.png"><img class="aligncenter size-full wp-image-1323" title="Jump to the end" src="1424_fichiers/99.png" alt="" height="198" width="450"></a> </p><p></p>
<p>Which is toward the end of this method. If you scroll back up and 
take a look, you will see that basically all of the buttons do the same 
thing; they add a value, XOR a value and jump to the end. They just 
differ by the values. Then here, at the end, we increment the contents 
of memory location 403044 (which started as a zero), and we can assume 
this is some sort of counter. We then store our new values for ECX, EBX 
and EAX back into the same memory we read them from. After returning, we
 come back to the main function:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/109.png"><img class="aligncenter size-full wp-image-1324" title="Back to main function" src="1424_fichiers/109.png" alt="" height="217" width="422"></a> </p><p></p>
<p>and then perform a jump to location 4011F2:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/1113.png"><img class="aligncenter  wp-image-1325" title="Jump again" src="1424_fichiers/1113.png" alt="" height="327" width="659"></a> </p><p></p>
<p>Next we compare memory location 403048 (which is zero) with 3 (we 
don’t know why yet), then compare our counter at address 403044 with 
0x0A. Again, this indicates that 403044 contains a counter that counts 
to 0x0A. We then jump if it’s not equal to 0x0A, telling us that we will
 run through this loop 10 times before we fall through. You may also 
have noticed the JNB at address 4011F9 that points to the brute-force 
message. Obviously, location 403048 will have some sort of counter in 
it, and if it gets above 3 we will get the brute-force message:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/1210.png"><img class="aligncenter size-full wp-image-1326" title="Bruteforce message" src="1424_fichiers/1210.png" alt="" height="158" width="636"></a> </p><p></p>
<p>Now, let’s continue running the program and click on button #2. We break at our BP:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/140.png"><img class="aligncenter size-full wp-image-1400" title="Hit BP again" src="1424_fichiers/140.png" alt="" height="163" width="517"></a> </p><p></p>
<p>ARG.3, and in return, EAX and EDX will equal the ID of button number 2, or 0×66:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/236.png"><img class="aligncenter size-full wp-image-1401" title="Value equals 66" src="1424_fichiers/236.png" alt="" height="105" width="214"></a> </p><p></p>
<p>That means we will now run the code associated with button #2:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/324.png"><img class="aligncenter size-full wp-image-1402" title="We perform the '66' code" src="1424_fichiers/324.png" alt="" height="131" width="414"></a> </p><p></p>
<p>Jumping into the call at 4010BA, we do the same thing we did the 
first time through, only this time 1) the memory will not contain 0xDEAD
 and 42424242, but instead will contain adjusted values and 2) since we 
clicked on the second button, we will perform the code at address 4012D6
 which performs a SUB ECX, 233 and IMUL EBX, EBX, 14 etc. We then jump 
to the end of the routine again:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/422.png"><img class="aligncenter size-full wp-image-1403" title="Incremement the counter" src="1424_fichiers/422.png" alt="" height="147" width="466"></a> </p><p></p>
<p>Here, we increment the counter at 403044, move the new variables back
 into their memory locations and return to our main loop. Stepping once 
jumps to the end of our main loop:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/510.png"><img class="aligncenter size-full wp-image-1404" title="Back to main loop" src="1424_fichiers/510.png" alt="" height="315" width="694"></a> </p><p></p>
<p>where we compare 403048 (which is still zero) and jump to the brute 
force message if it’s greater than 3. We also compare 403044 with 0A and
 jump to the error code if our ID is above this (can you figure out 
why?). We then return from our main loop and return to the Windows loop 
that wait’s for us to do something.</p>
<p>&nbsp;</p>
<h2><span style="color: #0a77e1;">Cracking the App</span></h2>
<p>Now that we understand how the app works, let’s patch it. For this 
app, we need to use a little intuition. By following through the entire 
flow of this app, we can see that there are not a lot of compare/jumps 
out of the normal flow. Really, the only ones we see are the jump to the
 brute force message at address 4011F9, a jump to the ‘about’ box if we 
fall all the way through all of the compares from address 4010B2 to 
4011A6, a jump to the ‘clear’ code that resets the memory locations back
 to 0xDEAD and 42424242 at address 4011CA, and a fall through to the 
‘error message’ at 401204. If you click the ‘about’ button and trace the
 code, you will see that it only displays the about box and then returns
 to our main loop. Doing the same on the ‘clear’ button does the same. 
So that leaves either the brute force code or the error code.</p>
<p>Now here’s where a little intuition comes in. Every time we checked 
the address 403048 to see if we should jump to the brute force message, 
the contents were zero and the jump was never taken. However, the 
compare at address 4011FB compares the counter at address 403044 and 
this will jump after reaching 0x0A. We also know that every time through
 the loop, the contents of 403044 were incremented, so we can assume 
this counter ‘counts’ how many buttons we’ve pressed:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/611.png"><img class="aligncenter size-full wp-image-1405" title="The suspicious inc" src="1424_fichiers/611.png" alt="" height="114" width="436"></a> </p><p></p>
<p>Of course your first thought will be ‘yeah, but, that code leads to 
an error message!”. But does it? All the code does is load a pointer to a
 message that says there was an error, but is this displayed? Not in 
this code…so maybe not at all. This section of code looks highly 
suspicious, so let’s trace through it. We know that we get to this code 
by clicking at least 0x0A (10) buttons. So let’s place a BP at address 
401204, clear our other breakpoints, and re-start the app (so we can 
count off 10 button presses):</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/711.png"><img class="aligncenter size-full wp-image-1406" title="Placing the new BP" src="1424_fichiers/711.png" alt="" height="162" width="658"></a> </p><p></p>
<p>Now, after clicking 10 buttons (I pressed the button number 1 10 
times) we should break at our BP. First there is a call to 40144C. Let’s
 step into that and see what it does:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/811.png"><img class="aligncenter size-full wp-image-1407" title="The first suspicious call" src="1424_fichiers/811.png" alt="" height="111" width="703"></a> </p><p></p>
<p>Hmm, this sets up and then calls VirtualProtect. After reading the 
info on VirtualProtect, you will see that it is basically used to change
 the attributes of a section of memory. For example, the section of a 
binary that contains the executable code has it’s attributes generally 
set to execute, but not to writeable, as there really isn’t a lot of 
point of writing to the code section- that’s what the data section is 
for. If you wanted to change a part of the code section to ‘writable’ in
 addition to ‘executable’, you would use this function. Then you could 
write to this memory section, in effect changing the code ‘on the fly’. 
This is how self-modifying code works- it calls VirtualProtect on a 
section of memory in the code section, adds the ‘writable’ attribute, 
changes the code (perhaps XORing it with a number) and then calls 
VirtualProtect again to change the attributes back to executable only. 
Now, the code has been changed on the fly.</p>
<p>It appears that this app is doing something similar. The last 
argument to VirtualProtect is the memory location you want to change the
 attributes for, and the third value is the length in bytes of the 
section you want to alter. In this case we can see that the starting 
address is 401407 and the length is 0x1F4 (500). We can also see that 
the second argument is PAGE_READWRITE, making this section writable as 
well as readable. Let’s look at this section of memory, starting at 
401407, and see what is going to change:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/112.png"><img class="aligncenter size-full wp-image-1552" title="The empty section" src="1424_fichiers/112.png" alt="" height="472" width="649"></a> </p><p></p>
<p>Hmmmmm. That looks really suspicious. It doesn’t look like code at 
all. Let’s keep going and see what the app changes in this section of 
memory. Step just past the call to VirtualProtect:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/1011.png"><img class="aligncenter size-full wp-image-1409" title="Past the call" src="1424_fichiers/1011.png" alt="" height="208" width="689"></a> </p><p></p>
<p>Now, the first thing we do is move the contents of memory location 
403038 into EAX and XOR it with memory location 401407, storing the 
result back into address 401407. Wait a minute! 401407 was the first 
address of the memory section we changed the attributes for so that we 
could write to it. And 403038 began as 0xDEAD but was changed depending 
on which buttons we pressed (and in what order). So this sequence of 
instructions is changing that memory space based on what buttons and in 
which order they were pressed. Step over until we get to the JNZ at 
address 401475 and then let’s look at address 401407:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/27.png"><img class="aligncenter size-full wp-image-1553" title="Memory was changed" src="1424_fichiers/27.png" alt="" height="332" width="504"></a> </p><p></p>
<p>You will notice that address 401407 was changed and now has a valid instruction in it, a <strong>JECXZ SHORT crackme1.004013E5</strong>.
 The app just added a conditional jump to it’s own code! The way it did 
this was by changing the opcodes, or raw data, at that memory location. 
Going back to our current instruction, the next thing it does is compare
 the first byte at 401407 with 0×52 and jumps if it is not equal (to 
address 40148F). Looking at the above picture, we can see the opcode 
value at 401407 is “E3″ which does not equal 52, so we will jump. The 
jump is to another setup and call of VirtualProtect, this time locking 
that section of memory back to executable:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/1212.png"><img class="aligncenter size-full wp-image-1411" title="Back to executable" src="1424_fichiers/1212.png" alt="" height="149" width="686"></a> </p><p></p>
<p>but before this you may have noticed that memory location 401407 was 
XOR’ed again at address 40148F. Looking again at address 401407 we see 
that it was changed again:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/37.png"><img class="aligncenter size-full wp-image-1554" title="Changed again" src="1424_fichiers/37.png" alt="" height="212" width="528"></a> </p><p></p>
<p>So now we have a JMP instead of a JECXZ. So in effect, the app just 
changed it’s own memory twice, once to be a JECXZ and the second time to
 be a JMP. Stepping again we return back to our main loop:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/148.png"><img class="aligncenter size-full wp-image-1413" title="Back to main again" src="1424_fichiers/148.png" alt="" height="197" width="756"></a> </p><p></p>
<p>We then push a value (F08E2) into the stack and call another routine at address 401403. stepping in we see that function:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/46.png"><img class="aligncenter size-full wp-image-1555" title="Jumping to changed code" src="1424_fichiers/46.png" alt="" height="115" width="509"></a> </p><p></p>
<p>Well, well, well. we have jumped to the area of memory that the app 
changed. We recognize the new JMP at address 401407. Let’s step onto the
 jump and see where we go:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/167.png"><img class="aligncenter size-full wp-image-1415" title="Odd" src="1424_fichiers/167.png" alt="" height="442" width="667"></a> </p><p></p>
<p>Odd, it is jumping to a return. So it appears this didn’t really do anything. We are now back at the main program:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/176.png"><img class="aligncenter size-full wp-image-1416" title="Back again" src="1424_fichiers/176.png" alt="" height="163" width="700"></a> </p><p></p>
<p>The next thing we are going to do is reset our counter from 0x0A back
 to zero. We will then increment the counter for the brute force check 
by one. Now we know how the brute force check works: if you enter a 
(wrong) 10 digit code more than 3 times, the contents of location 403048
 will be above 3 and we will jump to the brute force message. If you 
want to try it, go ahead. Just remove the BP at address 401204 and enter
 in a 10 digit code three times:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/07/187.png"><img class="aligncenter size-full wp-image-1417" title="Brute force message" src="1424_fichiers/187.png" alt="" height="228" width="338"></a> </p><p></p>
<p>And we get the expected message.</p>
<p>Now, make sure our BP is still set at address 401204 (and clear all 
other BPs) and restart the app. We have to restart the app as once you 
enter the brute force message it zeroes out the counter every time. Can 
you see where?</p>
<p>So what we know so far:</p>
<p><em>1) The password is 10 digits.</em><br>
<em> 2) If you try more than three times with the wrong code, you get a brute force message and have to restart.</em><br>
<em> 3) Every time you hit a button, memory locations 403038, 40303C and 403040 get modified in a different way for each button.</em><br>
<em> 4) After hitting ten buttons, we enter a couple calls that check 
our code and changes a jump instruction in the code section of memory at
 address 401407.</em><br>
<em> 5) If the password is not correct, the jump that is created points to a return that just returns us back to the main loop.</em><br>
<em> 6) Therefore, entering the correct password must change this jump 
to something else, either a jump to a different memory location where 
our good boy will be, or changing more of the code in this area to 
create the goodboy at this memory section instead of creating a jump. 
This sounds more plausible as if it was simply changed into a jump to a 
new location, what is all this weird looking, non-functioning code for?<br>
</em></p>
<p>Knowing all this, we know we must zero in on the section of code that
 does the self modifying changes, namely the code starting at address 
40144C. Let’s look at that section again:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/19.png"><img class="aligncenter size-full wp-image-1537" title="Another look" src="1424_fichiers/19.png" alt="" height="279" width="671"></a> </p><p></p>
<p>One thing we can gather is that the compare with 0×52 at address 
40146e is pretty important. It basically tells the program that the 
changes to the code that have been made are the correct changes. But 
what is an opcode of 0×52 mean? Well, after a rather lengthy Google 
search, I discovered that opcode 0×52 is “PUSH EDX”. So therefore, this 
code checks to see if the first instruction is a “PUSH EDX”, and if it 
isn’t, it bugs out. So what happens if we force that instruction to be a
 push edx? Let’s try it. Set a BP at address 40146E where the code 
checks for the push instruction and run the app. When we break at this 
address, go to address 401407 and change the value to 0×52:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/44.png"><img class="aligncenter size-full wp-image-1538" title="Add the push edx" src="1424_fichiers/44.png" alt="" height="214" width="653"></a> </p><p></p>
<p>Now, single stepping, we should bypass the JNZ on the 0×52 check:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/54.png"><img class="aligncenter size-full wp-image-1539" title="No jump" src="1424_fichiers/54.png" alt="" height="118" width="486"></a> </p><p></p>
<p>Now, the code moves the value at address 40303C into EAX and XORs it 
with memory location 40143B. What is that address? Let’s look:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/64.png"><img class="aligncenter size-full wp-image-1540" title="Weird location" src="1424_fichiers/64.png" alt="" height="405" width="571"></a> </p><p></p>
<p>As we can see, it is just a memory location toward the end of our self modified code section. After XORing it, we then have:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/25.png"><img class="aligncenter size-full wp-image-1541" title="XOR1" src="1424_fichiers/25.png" alt="" height="80" width="509"></a> </p><p></p>
<p>And we then change the next location at 40143F by XORing that location with the contents of 403040:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/35.png"><img class="aligncenter size-full wp-image-1542" title="XOR2" src="1424_fichiers/35.png" alt="" height="49" width="371"></a> </p><p></p>
<p>Now we know that these locations are not being changed into the 
proper code, so it’s not really helping us, but seeing as this is the 
last thing that the app changes, it must be important. Let’s keep going,
 now that we’ve changed the PUSH EDX and see what this sections does. 
Step back into the main loop and then into the call at address 401211:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/73.png"><img class="aligncenter size-full wp-image-1543" title="The self modified section" src="1424_fichiers/73.png" alt="" height="302" width="513"></a> </p><p></p>
<p>We are now at the beginning of the self modified section, starting 
with our added PUSH EDX. Let’s tell Olly that things have changed and to
 re-analyze this section of code:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/83.png"><img class="aligncenter size-full wp-image-1544" title="Re-analyze the code" src="1424_fichiers/83.png" alt="" height="515" width="893"></a> </p><p></p>
<p>and things start to look a lot better:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/93.png"><img class="aligncenter size-full wp-image-1545" title="Thats a lot better" src="1424_fichiers/93.png" alt="" height="398" width="629"></a> </p><p></p>
<p>It looks like real code now! Well, except for that bit at the end that we created incorrectly.</p>
<p>Now, this is where things get a little challenging and experience 
will be helpful here. We must look at this code from a ‘big-picture’ 
standpoint and think “What is it trying to do?”. We have a PUSH EDX at 
the beginning. This, together with the POP EDX at the end tells us that 
EDX will be used in this code locally. We then have some empty NOPS 
which should probably contain code, though we don’t know yet which code.
 We then have a bunch of memory locations being XORed with DWORDs. 
Experience will tell you that this normally means we are decrypting 
something, and in this case it’s whatever EDX points to. We can deduce 
that because EDX is PUSHed and then never set, even though it goes on to
 be changed and referenced. The NOPs are probably the location to set 
EDX, and EDX will point to something that will be decrypted (or altered)
 with the XORs.</p>
<p>Lastly, we have several memory locations that were incorrectly 
decrypted starting at address 40143D. BUT the call to SetDlgItemTextA 
was not one of them, meaning this instruction was not changed. Generally
 before a call to SetDlgItemTextA, we have seen that arguments are 
pushed onto the stack, so we can assume that when we enter the correct 
password, the instructions from 40143d to 401442 will probably contain 
several push instructions (probably 3).</p>
<p>Now the big question is what should EDX point to? We have several 
choices here, and again, this is where experience comes in. An 
experienced reverse engineer will probably remember that string “An 
error occurred” and think “we never used that string. We saw that it was
 just a decoy and was never used. Maybe that is what will be 
decrypted…”. Another hint that tells us that this is a viable solution 
is that the string is pushed onto the stack but is never used. Why? Here
 is a picture of the stack when we enter this code:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/55.png"><img class="aligncenter size-full wp-image-1560" title="The stack" src="1424_fichiers/55.png" alt="" height="128" width="437"></a> </p><p></p>
<p>So assuming that we want to test our hypothesis, we want EDX to point
 to this string. The easiest way would be lo simply load EDX with the 
offset in memory that the “An error occurred” string is placed, namely 
address 403000. The problem is that would take up too many bytes. 
Looking again at our code, there are only 3 NOPs that we can use to load
 EDX with a pointer to the error string. Well,putting our assembly hat 
on, and remembering that the string is currently pushed onto the stack, 
maybe we can load EDX with the pointer to the string from the stack…</p>
<p>Generally we load a local variable with an instruction like this:</p>
<p>MOV EDX, [EBP + some_#] or MOV EDX, [EBP - some_#]</p>
<p>So the question is what is that number? Step over the first couple of instructions until we get to address 401408:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/74.png"><img class="aligncenter size-full wp-image-1562" title="Ready the stack" src="1424_fichiers/74.png" alt="" height="269" width="514"></a> </p><p></p>
<p>Looking back at the registers we can see that EBP points to 18F9C0 
and that the error string is 12 bytes higher than EBP (lower on the 
stack):</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/84.png"><img class="aligncenter size-full wp-image-1563" title="Investigating the stack" src="1424_fichiers/84.png" alt="" height="199" width="443"></a> </p><p></p>
<p>So our instruction that would load a pointer to the error string would be:</p>
<p>MOV EDX, [EBP + 0x0C]</p>
<p>Let’s try it and see how many bytes it takes:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/94.png"><img class="aligncenter size-full wp-image-1564" title="Adding the move to edx" src="1424_fichiers/94.png" alt="" height="231" width="752"></a> </p><p></p>
<p>&nbsp;</p>
<p>It seemed to fit just right <img src="1424_fichiers/icon_smile.gif" alt=":)" class="wp-smiley">  . Now let’s single step and see what happens. First, at address 401408, EDX is loaded with a pointer to our text:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/102.png"><img class="aligncenter size-full wp-image-1565" title="EDX = our string" src="1424_fichiers/102.png" alt="" height="113" width="267"></a> </p><p></p>
<p>EDX is then incremented, so now points to the second character of our
 string( the ‘n’ in ‘An error occurred’). Four bytes (one dword) is 
loaded into EAX starting at the ‘n’ in ‘An error occurred”. EAX is then 
XORed with 0x100430D, making EAX equal to 0×73656363. This new value is 
then going to be saved into the address where the error string is 
located (at 403000). We can see the string before our value is stored:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/113.png"><img class="aligncenter size-full wp-image-1566" title="Before modification" src="1424_fichiers/113.png" alt="" height="193" width="464"></a> </p><p></p>
<p>and after it’s stored:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/122.png"><img class="aligncenter size-full wp-image-1567" title="After modification 1" src="1424_fichiers/122.png" alt="" height="197" width="461"></a> </p><p></p>
<p>Hmmm. Our string is being modified. Let’s keep going.</p>
<p>We now load the next four bytes, XOR them with 0x52154F01, and store 
them back into memory, which makes our string now look like this:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/132.png"><img class="aligncenter size-full wp-image-1568" title="Modification 2" src="1424_fichiers/132.png" alt="" height="145" width="467"></a> </p><p></p>
<p>Ahh, now we’re getting somewhere. Stepping over the next bit of code gives us the next four bytes:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/142.png"><img class="aligncenter size-full wp-image-1569" title="Modification 3" src="1424_fichiers/142.png" alt="" height="127" width="476"></a> </p><p></p>
<p>And now we can probably guess what it’s going to say. Stepping over the last modification shows us the entire string:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/151.png"><img class="aligncenter size-full wp-image-1570" title="Last modification" src="1424_fichiers/151.png" alt="" height="146" width="462"></a> </p><p></p>
<p>And we can see that we were right, though we’re not out of the woods 
yet. We now know what the string should say. The problem is, since we 
entered an incorrect password and the last statements were incorrectly 
decrypted, our message will never be displayed. What we have to do is 
rebuild the pushing of the argument onto the stack for the 
SetDlgItemTextA. Getting help in Olly on SetGlgItemTextA, we can see 
that there are three arguments that need to be pushed onto the stack (in
 assembly order):</p>
<p>LPCTSTR lpString &nbsp;&nbsp; &nbsp;// text to set<br>
int nIDDlgItem,&nbsp;&nbsp; &nbsp;// identifier of control<br>
HWND hDlg,&nbsp;&nbsp; &nbsp;// handle of dialog box</p>
<p>The first one is easy:</p>
<p>PUSH [EBP + 0x0c]</p>
<p>As this is the pointer to our new text string. The second and last 
options are a little harder, but fortunately we have a reference. There 
is a SetGlgItemTextA when the bruteforce message is displayed:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/161.png"><img class="aligncenter size-full wp-image-1571" title="Bruteforce" src="1424_fichiers/161.png" alt="" height="89" width="770"></a> </p><p></p>
<p>We can see that the ControlID equals 3 and the handle to the window is 707AA. The control ID is easy:</p>
<p>PUSH 3</p>
<p>The handle is a little harder, but looking at the stack again, it’s not that hard:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/171.png"><img class="aligncenter size-full wp-image-1572" title="Handle on the stack" src="1424_fichiers/171.png" alt="" height="177" width="436"></a> </p><p></p>
<p>Fortunately, the handle is right on the stack:</p>
<p>PUSH DWORD PTR [EBP + 8]</p>
<p>Inserting our code now makes the disassembly look rather nice:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/181.png"><img class="aligncenter size-full wp-image-1573" title="Finished Patching" src="1424_fichiers/181.png" alt="" height="277" width="637"></a> </p><p></p>
<p>Running the app finally rewards us with our goodboy:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/08/191.png"><img class="aligncenter size-full wp-image-1574" title="Success" src="1424_fichiers/191.png" alt="" height="228" width="338"></a> </p><p></p>
<p>Saving the binary with our patches now makes it possible to enter any
 10 digit password and get the goodboy. We can consider the app cracked.</p>
<p>Of course, it kind of feels like we cheated a little bit (and we 
did). It seems like it would be much more gratifying to know what the 
password really is. Well, you’re in luck as that’s the topic of the next
 tutorial <img src="1424_fichiers/icon_smile.gif" alt=":)" class="wp-smiley"> </p>
<p>&nbsp;</p>
<h2><span style="color: #0a77e1;">Homework</span></h2>
<p>Beginning at location 4012C0, each button dictates various 
manipulations on the main variables at addresses 402038, 40303C, and 
403040. Let’s call these variables a, b and c ( a = 402038, b = 40303C 
and c = 403040). Can you figure out what each button does to manipulate 
these three variables? I’ll give you the first one:<br>
<strong>4012C0&nbsp;&nbsp; add ecx, 54Bh&nbsp;&nbsp; ; c += 54Bh<br>
4012C6&nbsp;&nbsp; imul ebx, eax&nbsp;&nbsp;&nbsp;&nbsp; ; b *= a<br>
4012C9&nbsp;&nbsp; xor eax, ecx&nbsp;&nbsp;&nbsp; ; a^= c </strong><br>
Now, can you figure out the remaining 14?</p>
<p>&nbsp;</p>
<p>-Till next time.</p>
<p>R4ndom</p>
</div>
          	<div class="clr"></div>
          	<span class="linkpages"></span><div class="cleared"></div>
          	
			            
				<div class="roundcornrrbox">
                   	<div class="topleftcorner"><div class="toprightcorner"></div></div>
                    <div class="roubcornrcontent">
            			<span class="posttags-single">No tags</span>
                    	<div class="clr"></div>
                    </div>
                    <div class="bottomleftcorner"><div class="bottomrightcorner"></div></div>
                </div>                        
                        
			
			        	
            <div class="clr"></div>
        </div> <!-- Closes topPost -->
		<small></small>

		<div id="comments">
			            <!-- WP 2.7 and above -->
            <div class="roundcornrrbox">
	<div class="topleftcorner"><div class="toprightcorner"></div></div>
	<div class="roubcornrcontent">

		<h3 id="commentstitle">11 Comments for this entry</h3>
	<ul class="commentlist">
		   <li class="comment even thread-even depth-1" id="li-comment-2352">
     <div id="comment-2352">

			<div class="commentbody">
            
                <a class="gravatar">
                	<img alt="" src="1424_fichiers/ad516503a11cd5ca435acc9bb6523536.png" class="avatar avatar-60 photo avatar-default" height="60" width="60">                </a>             
            
			<cite>gen</cite> 
						<br>
			<small class="commentmetadata"><a href="#comment-2352" title="">August 5th, 2012 on 6:41 pm</a>  </small>

			<p>This was a fantastic breakdown of this crackme, good work man.</p>
			</div><div class="cleared"></div>

      <div class="reply">
         <a class="comment-reply-link" href="http://thelegendofrandom.com/blog/archives/1424?replytocom=2352#respond" onclick='return addComment.moveForm("comment-2352", "2352", "respond", "1424")'>Reply</a>       </div>
     </div>
<ul class="children">
   <li class="comment byuser comment-author-random bypostauthor odd alt depth-2" id="li-comment-2359">
     <div id="comment-2359">

			<div class="commentbody">
            
                <a class="gravatar">
                	<img alt="R4ndom" src="1424_fichiers/R4ndom_avatar-60x60.png" class="avatar avatar-60 photo" height="60" width="60">                </a>             
            
			<cite>R4ndom</cite> 
						<br>
			<small class="commentmetadata"><a href="#comment-2359" title="">August 5th, 2012 on 8:27 pm</a>  </small>

			<p>Thank you. You are very kind.</p>
			</div><div class="cleared"></div>

      <div class="reply">
         <a class="comment-reply-link" href="http://thelegendofrandom.com/blog/archives/1424?replytocom=2359#respond" onclick='return addComment.moveForm("comment-2359", "2359", "respond", "1424")'>Reply</a>       </div>
     </div>
</li>
</ul>
</li>
   <li class="comment even thread-odd thread-alt depth-1" id="li-comment-2396">
     <div id="comment-2396">

			<div class="commentbody">
            
                <a class="gravatar">
                	<img alt="" src="1424_fichiers/ad516503a11cd5ca435acc9bb6523536.png" class="avatar avatar-60 photo avatar-default" height="60" width="60">                </a>             
            
			<cite>them123</cite> 
						<br>
			<small class="commentmetadata"><a href="#comment-2396" title="">August 6th, 2012 on 2:28 pm</a>  </small>

			<p>This was a really good one. Very tough but I learned a lot. Really enjoying these tutorials – please keep ‘em, coming!</p>
			</div><div class="cleared"></div>

      <div class="reply">
         <a class="comment-reply-link" href="http://thelegendofrandom.com/blog/archives/1424?replytocom=2396#respond" onclick='return addComment.moveForm("comment-2396", "2396", "respond", "1424")'>Reply</a>       </div>
     </div>
</li>
   <li class="comment odd alt thread-even depth-1" id="li-comment-3282">
     <div id="comment-3282">

			<div class="commentbody">
            
                <a class="gravatar">
                	<img alt="" src="1424_fichiers/f5bd3bb966f255429dc9d36db6f16d1b.png" class="avatar avatar-60 photo" height="60" width="60">                </a>             
            
			<cite>johnsmith</cite> 
						<br>
			<small class="commentmetadata"><a href="#comment-3282" title="">August 23rd, 2012 on 7:12 am</a>  </small>

			<p>Nice tutorial, very helpful for basics of cracking</p>
			</div><div class="cleared"></div>

      <div class="reply">
         <a class="comment-reply-link" href="http://thelegendofrandom.com/blog/archives/1424?replytocom=3282#respond" onclick='return addComment.moveForm("comment-3282", "3282", "respond", "1424")'>Reply</a>       </div>
     </div>
</li>
   <li class="comment even thread-odd thread-alt depth-1" id="li-comment-3616">
     <div id="comment-3616">

			<div class="commentbody">
            
                <a class="gravatar">
                	<img alt="" src="1424_fichiers/e6c90565eed74f14af4df4010f84d5c6.png" class="avatar avatar-60 photo" height="60" width="60">                </a>             
            
			<cite>Roadi</cite> 
						<br>
			<small class="commentmetadata"><a href="#comment-3616" title="">August 31st, 2012 on 12:52 am</a>  </small>

			<p>Indeed this tutorial was very helpful in shedding light on a 
multiple of aspects regarding RCE. But I must say ‘the solution’ itself 
felt rather unreliable and reminded me of – I wouldn’t go as far as 
saying ‘pure’, but – ‘good’ luck.</p>
<p>As such, based on your experience, Random, are ‘solutions’ of this kind plenty or closer to ‘a one of a kind’ trick?</p>
<p>(On a side note, I just noticed that the sentences I construct in 
English feel rather ‘off’…  …let us put the blame on my origin of a 
non-native English speaker. ^^ )</p>
<p>-Roadi</p>
			</div><div class="cleared"></div>

      <div class="reply">
         <a class="comment-reply-link" href="http://thelegendofrandom.com/blog/archives/1424?replytocom=3616#respond" onclick='return addComment.moveForm("comment-3616", "3616", "respond", "1424")'>Reply</a>       </div>
     </div>
</li>
   <li class="comment byuser comment-author-random bypostauthor odd alt thread-even depth-1" id="li-comment-3636">
     <div id="comment-3636">

			<div class="commentbody">
            
                <a class="gravatar">
                	<img alt="R4ndom" src="1424_fichiers/R4ndom_avatar-60x60.png" class="avatar avatar-60 photo" height="60" width="60">                </a>             
            
			<cite>R4ndom</cite> 
						<br>
			<small class="commentmetadata"><a href="#comment-3636" title="">August 31st, 2012 on 3:14 pm</a>  </small>

			<p>“(On a side note, I just noticed that the sentences I construct in
 English feel rather ‘off’… …let us put the blame on my origin of a 
non-native English speaker. ^^ )”</p>
<p>Coulda fooled me.</p>
<p>And, yes, this tutorial is somewhat indicative of the majority of 
keygenners out there. Sometimes you come across something different, but
 it is the exception more than the rule…</p>
			</div><div class="cleared"></div>

      <div class="reply">
         <a class="comment-reply-link" href="http://thelegendofrandom.com/blog/archives/1424?replytocom=3636#respond" onclick='return addComment.moveForm("comment-3636", "3636", "respond", "1424")'>Reply</a>       </div>
     </div>
</li>
   <li class="comment even thread-odd thread-alt depth-1" id="li-comment-3889">
     <div id="comment-3889">

			<div class="commentbody">
            
                <a class="gravatar">
                	<img alt="" src="1424_fichiers/ad516503a11cd5ca435acc9bb6523536.png" class="avatar avatar-60 photo avatar-default" height="60" width="60">                </a>             
            
			<cite>Modnar</cite> 
						<br>
			<small class="commentmetadata"><a href="#comment-3889" title="">September 7th, 2012 on 1:29 pm</a>  </small>

			<p>Wow awesome, FRIGGIN LOVE IT!<br>
This is the best tutorial EVER, love all those stuff and the best part 
is I guess what to do before I actually read it, feels good!</p>
<p>One thing though:<br>
Can we know the size of an instruction beforehand? like for example we 
didn’t do mov edx, dword ptr [address of "error occured"]. Instead, we 
did mov edx, [ebp+0c].. I mean how did you know (besides trying of 
course and noticing that the first one overwrites code we need) the size
 of our instruction?</p>
<p>Thanks, really!</p>
			</div><div class="cleared"></div>

      <div class="reply">
         <a class="comment-reply-link" href="http://thelegendofrandom.com/blog/archives/1424?replytocom=3889#respond" onclick='return addComment.moveForm("comment-3889", "3889", "respond", "1424")'>Reply</a>       </div>
     </div>
<ul class="children">
   <li class="comment byuser comment-author-random bypostauthor odd alt depth-2" id="li-comment-3893">
     <div id="comment-3893">

			<div class="commentbody">
            
                <a class="gravatar">
                	<img alt="R4ndom" src="1424_fichiers/R4ndom_avatar-60x60.png" class="avatar avatar-60 photo" height="60" width="60">                </a>             
            
			<cite>R4ndom</cite> 
						<br>
			<small class="commentmetadata"><a href="#comment-3893" title="">September 7th, 2012 on 3:24 pm</a>  </small>

			<p>There are two ways to figure out the length of an instruction; In 
you assembly book, there will be a section that displays the opcodes to 
each instruction, along with the length.</p>
<p>You can also do what I did, try them in Olly and see how long they are when you patch the code <img src="1424_fichiers/icon_smile.gif" alt=":)" class="wp-smiley"> </p>
			</div><div class="cleared"></div>

      <div class="reply">
         <a class="comment-reply-link" href="http://thelegendofrandom.com/blog/archives/1424?replytocom=3893#respond" onclick='return addComment.moveForm("comment-3893", "3893", "respond", "1424")'>Reply</a>       </div>
     </div>
</li>
</ul>
</li>
   <li class="comment even thread-even depth-1" id="li-comment-4035">
     <div id="comment-4035">

			<div class="commentbody">
            
                <a class="gravatar">
                	<img alt="" src="1424_fichiers/ad516503a11cd5ca435acc9bb6523536.png" class="avatar avatar-60 photo avatar-default" height="60" width="60">                </a>             
            
			<cite>iKON</cite> 
						<br>
			<small class="commentmetadata"><a href="#comment-4035" title="">September 12th, 2012 on 7:50 am</a>  </small>

			<p>Instead of searching the web for opcodes, you can get Olly to do 
the work for you. Just go to line 401407, right click -&gt; binary -&gt;
  edit and enter 52 90, Olly will automatically show you the assembly 
code. </p>
<p>Also, anyone try running this on win7x64? I think it is throwing an error when the app tries to change data in the code segment.</p>
<p>Thanks r4ndom! I’m learning a lot with these tutorials.</p>
			</div><div class="cleared"></div>

      <div class="reply">
         <a class="comment-reply-link" href="http://thelegendofrandom.com/blog/archives/1424?replytocom=4035#respond" onclick='return addComment.moveForm("comment-4035", "4035", "respond", "1424")'>Reply</a>       </div>
     </div>
</li>
   <li class="comment byuser comment-author-markdeleon123 odd alt thread-odd thread-alt depth-1" id="li-comment-79862">
     <div id="comment-79862">

			<div class="commentbody">
            
                <a class="gravatar">
                	<img alt="" src="1424_fichiers/569a72fbd237aea16f8ae856c09b9c26.png" class="avatar avatar-60 photo" height="60" width="60">                </a>             
            
			<cite>markdeleon123</cite> 
						<br>
			<small class="commentmetadata"><a href="#comment-79862" title="">August 6th, 2013 on 7:39 am</a>  </small>

			<p>im confused on the …<br>
MOV EDX, [EBP + 0x0C]<br>
ESP is the top most stack value right?<br>
then what is EBP?<br>
18F9c0 – 18F9D4 = 0x0E?</p>
			</div><div class="cleared"></div>

      <div class="reply">
         <a class="comment-reply-link" href="http://thelegendofrandom.com/blog/archives/1424?replytocom=79862#respond" onclick='return addComment.moveForm("comment-79862", "79862", "respond", "1424")'>Reply</a>       </div>
     </div>
<ul class="children">
   <li class="comment even depth-2" id="li-comment-79940">
     <div id="comment-79940">

			<div class="commentbody">
            
                <a class="gravatar">
                	<img alt="" src="1424_fichiers/6cf13aae41a5f450f3bb8aec78790774.png" class="avatar avatar-60 photo" height="60" width="60">                </a>             
            
			<cite>D-zaster</cite> 
						<br>
			<small class="commentmetadata"><a href="#comment-79940" title="">August 7th, 2013 on 4:00 am</a>  </small>

			<p>It’s a screenshot error – EBP is actually located at 18F9C8</p>
			</div><div class="cleared"></div>

      <div class="reply">
         <a class="comment-reply-link" href="http://thelegendofrandom.com/blog/archives/1424?replytocom=79940#respond" onclick='return addComment.moveForm("comment-79940", "79940", "respond", "1424")'>Reply</a>       </div>
     </div>
</li>
</ul>
</li>
	</ul>
	
	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
		<div class="cleared"></div>
	</div>

	

 
<div class="clr"></div>
<div id="respond">
<h3>Leave a Reply</h3>
<div id="cancel-comment-reply">
	<small><a rel="nofollow" id="cancel-comment-reply-link" href="http://thelegendofrandom.com/blog/archives/1424#respond" style="display:none;">Click here to cancel reply.</a> </small>
</div>
 
<form action="http://thelegendofrandom.com/blog/wp-comments-post.php" method="post" id="commentform">


<p><input name="author" id="author" size="22" tabindex="1" type="text">
<label for="author"><small>Name </small></label></p>
<p><input name="email" id="email" size="22" tabindex="2" type="text">
<label for="email"><small>Mail (will not be published) </small></label></p>
<p><input name="url" id="url" size="22" tabindex="3" type="text">
<label for="url"><small>Website</small></label></p>

 <input name="comment_post_ID" value="1424" id="comment_post_ID" type="hidden">
<input name="comment_parent" id="comment_parent" value="0" type="hidden">

<!--<p><small><strong>XHTML:</strong> You can use these tags: &lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;strike&gt; &lt;strong&gt; </small></p>-->
<p><textarea name="comment" id="comment" cols="56" rows="10" tabindex="4"></textarea></p>
<p><input name="submit" id="submit" class="submitbutton" tabindex="5" value="Leave comment" type="submit">
<input name="comment_post_ID" value="1424" type="hidden">
</p>

<p style="display: none;"><input id="akismet_comment_nonce" name="akismet_comment_nonce" value="0f4b8bf846" type="hidden"></p> 
</form>
</div>
 
    </div>
    <div class="bottomleftcorner"><div class="bottomrightcorner"></div></div>
</div>            
                    </div> <!-- Closes Comment -->

<div id="extrastuff">
<span id="rssleft"><a href="http://thelegendofrandom.com/blog/archives/1424/feed"><abbr title="Really Simple Syndication">RSS</abbr> feed for this post (comments)</a> </span>

<span id="trackright"> · <a href="http://thelegendofrandom.com/blog/archives/1424/trackback" rel="trackback">TrackBack <abbr title="Uniform Resource Identifier">URI</abbr></a> </span>
<div class="cleared"></div>
</div>


</div><!-- Closes Main -->


<div id="rightcol">
	<div class="roundcornrrbox">
    <div class="topleftcorner"><div class="toprightcorner"></div></div>
    <div class="roundcrrcnt">
        <!-- Optional Intro -->
                
        <!-- widget -->



<h2>Login</h2>
<form action="http://thelegendofrandom.com/blog/wp-login.php" method="post">
<input name="log" id="log" size="20" type="text">
<input name="pwd" id="pwd" size="20" type="password">
<input name="submit" value="Send" class="button" type="submit">
    <p>
       <label for="rememberme"><input name="rememberme" id="rememberme" checked="checked" value="forever" type="checkbox"> Remember me</label>
       <input name="redirect_to" value="/blog/archives/1424" type="hidden">
    </p>
</form>
<a href="http://thelegendofrandom.com/blog/wp-login.php?action=lostpassword">Recover password</a> 



        		<li id="recent-posts-2" class="sidebaritem widget_recent_entries"><div class="sidebarbox">		<h2 class="widgettitle">Recent Posts</h2>		<ul>
					<li>
				<a href="http://thelegendofrandom.com/blog/archives/2980" title="My Absence">My Absence</a> 
						</li>
					<li>
				<a href="http://thelegendofrandom.com/blog/archives/2975" title="What Are These Strange Posts?">What Are These Strange Posts?</a> 
						</li>
					<li>
				<a href="http://thelegendofrandom.com/blog/archives/2966" title="Nice Beginning Article on Reversing Android">Nice Beginning Article on Reversing Android</a> 
						</li>
					<li>
				<a href="http://thelegendofrandom.com/blog/archives/2963" title="She Is 17-years-old, She Did It Publicly In High School And While Drunk">She Is 17-years-old, She Did It Publicly In High School And While Drunk</a> 
						</li>
					<li>
				<a href="http://thelegendofrandom.com/blog/archives/2961" title="And The Most Posts Submitted In A Single Sitting Goes To…">And The Most Posts Submitted In A Single Sitting Goes To…</a> 
						</li>
				</ul>
		</div></li><li id="recent-comments-2" class="sidebaritem widget_recent_comments"><div class="sidebarbox"><h2 class="widgettitle">Recent Comments</h2><ul id="recentcomments"><li class="recentcomments">tip on <a href="http://thelegendofrandom.com/blog/archives/1722#comment-85953">A New Tutorial by Xor06 : Bypassing a Server Check</a> </li><li class="recentcomments">tip on <a href="http://thelegendofrandom.com/blog/archives/2418#comment-85946">R4ndom’s Tutorial #23: TLS Callbacks</a> </li><li class="recentcomments">C4lculated on <a href="http://thelegendofrandom.com/blog/archives/1472#comment-85945">R4ndom’s Tutorial #17: Working With Delphi Binaries</a> </li><li class="recentcomments"><a href="http://rce-loverz.tk/" rel="external nofollow" class="url">X-Programmer</a>  on <a href="http://thelegendofrandom.com/blog/archives/7#comment-85935">Tutorial #1 : What is Reverse Engineering</a> </li><li class="recentcomments">shub on <a href="http://thelegendofrandom.com/blog/archives/859#comment-85873">R4ndom’s Tutorial #9: Solution</a> </li></ul></div></li><li id="archives-2" class="sidebaritem widget_archive"><div class="sidebarbox"><h2 class="widgettitle">Archives</h2>		<ul>
			<li><a href="http://thelegendofrandom.com/blog/archives/date/2012/10" title="October 2012">October 2012</a> </li>
	<li><a href="http://thelegendofrandom.com/blog/archives/date/2012/09" title="September 2012">September 2012</a> </li>
	<li><a href="http://thelegendofrandom.com/blog/archives/date/2012/08" title="August 2012">August 2012</a> </li>
	<li><a href="http://thelegendofrandom.com/blog/archives/date/2012/07" title="July 2012">July 2012</a> </li>
	<li><a href="http://thelegendofrandom.com/blog/archives/date/2012/06" title="June 2012">June 2012</a> </li>
	<li><a href="http://thelegendofrandom.com/blog/archives/date/2012/05" title="May 2012">May 2012</a> </li>
		</ul>
</div></li><li id="categories-2" class="sidebaritem widget_categories"><div class="sidebarbox"><h2 class="widgettitle">Categories</h2>		<ul>
	<li class="cat-item cat-item-23"><a href="http://thelegendofrandom.com/blog/archives/category/beginner" title="View all posts filed under Beginner">Beginner</a> 
</li>
	<li class="cat-item cat-item-31"><a href="http://thelegendofrandom.com/blog/archives/category/challenges" title="View all posts filed under Challenges">Challenges</a> 
</li>
	<li class="cat-item cat-item-24"><a href="http://thelegendofrandom.com/blog/archives/category/intermediate" title="View all posts filed under Intermediate">Intermediate</a> 
</li>
	<li class="cat-item cat-item-32"><a href="http://thelegendofrandom.com/blog/archives/category/modifying-binaries" title="View all posts filed under Modifying Binaries">Modifying Binaries</a> 
</li>
	<li class="cat-item cat-item-25"><a href="http://thelegendofrandom.com/blog/archives/category/randoms-ramblings" title="View all posts filed under Random's Ramblings">Random's Ramblings</a> 
</li>
	<li class="cat-item cat-item-3"><a href="http://thelegendofrandom.com/blog/archives/category/reverse-engineering" title="View all posts filed under Reverse Engineering">Reverse Engineering</a> 
</li>
	<li class="cat-item cat-item-4"><a href="http://thelegendofrandom.com/blog/archives/category/tools" title="View all posts filed under Tools">Tools</a> 
</li>
	<li class="cat-item cat-item-5"><a href="http://thelegendofrandom.com/blog/archives/category/tutorials" title="View all posts filed under Tutorials">Tutorials</a> 
</li>
	<li class="cat-item cat-item-1"><a href="http://thelegendofrandom.com/blog/archives/category/uncategorized" title="View all posts filed under Uncategorized">Uncategorized</a> 
</li>
		</ul>
</div></li><li id="meta-2" class="sidebaritem widget_meta"><div class="sidebarbox"><h2 class="widgettitle">Meta</h2>			<ul>
			<li><a href="http://thelegendofrandom.com/blog/wp-login.php?action=register">Register</a> </li>			<li><a href="http://thelegendofrandom.com/blog/wp-login.php">Log in</a> </li>
			<li><a href="http://thelegendofrandom.com/blog/feed" title="Syndicate this site using RSS 2.0">Entries <abbr title="Really Simple Syndication">RSS</abbr></a> </li>
			<li><a href="http://thelegendofrandom.com/blog/comments/feed" title="The latest comments to all posts in RSS">Comments <abbr title="Really Simple Syndication">RSS</abbr></a> </li>
			<li><a href="http://wordpress.org/" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.org</a> </li>
						</ul>
</div></li><li id="ajax-quick-subscribe" class="sidebaritem widget_quick_subscribe"><div class="sidebarbox"><h2 class="widgettitle">Subscribe</h2>Enter your email to subscribe to future updates<div id="QSWidgetDiv" class="QSWidgetDiv"><form name="widget_quick_subscribe_form" id="widget_quick_subscribe_form"><input name="QS_user_email_widget" id="QS_user_email_widget" placeholder="email@email.com" onfocus='fadeSubmitIn("widget_qsSubmit");' onblur='fadeSubmitOut(this, "widget_qsSubmit");' onkeypress='return checkForEnter(event, "QS_user_email_widget", "QSWidgetDiv"); return false;' type="email"><input style="display:none;" value="subscribe!" id="widget_qsSubmit" class="widget_qsSubmit" onclick='submitQuickSubscribe("QS_user_email_widget", "QSWidgetDiv");' type="button"></form></div>			
			</div></li> 

        <div class="clr"></div>

    	<div id="feedbox">
            <div id="contrssbox">
                <a href="http://thelegendofrandom.com/blog/feed">RSS Feed</a> 
            </div>
        </div>
        


    </div>
    <div class="bottomleftcorner"><div class="bottomrightcorner"></div></div>
</div>
</div>
<div class="clr"></div>




    
	<div id="bottompanel">
    <div class="roundcornrrbox">
        <div class="topleftcorner"><div class="toprightcorner"></div></div>
        <div class="roundcrrcnt">
        
        	
            <div class="col1">
                
					                    <h3>Recent Posts</h3>
                    <ul>
                                                    <li>
                                <a href="http://thelegendofrandom.com/blog/archives/2980">My Absence </a> 
                            </li>
                                                    <li>
                                <a href="http://thelegendofrandom.com/blog/archives/2975">What Are These Strange Posts? </a> 
                            </li>
                                                    <li>
                                <a href="http://thelegendofrandom.com/blog/archives/2966">Nice Beginning Article on Reversing Android </a> 
                            </li>
                                                    <li>
                                <a href="http://thelegendofrandom.com/blog/archives/2963">She Is 17-years-old, She Did It Publicly In High School And While Drunk </a> 
                            </li>
                                                    <li>
                                <a href="http://thelegendofrandom.com/blog/archives/2961">And The Most Posts Submitted In A Single Sitting Goes To… </a> 
                            </li>
                        			
                    </ul>
                    

                            </div>
            
            <div class="col2">
                      
                    <h3>Archives</h3>
                    <ul>
                        	<li><a href="http://thelegendofrandom.com/blog/archives/date/2012/10" title="October 2012">October 2012</a> </li>
	<li><a href="http://thelegendofrandom.com/blog/archives/date/2012/09" title="September 2012">September 2012</a> </li>
	<li><a href="http://thelegendofrandom.com/blog/archives/date/2012/08" title="August 2012">August 2012</a> </li>
	<li><a href="http://thelegendofrandom.com/blog/archives/date/2012/07" title="July 2012">July 2012</a> </li>
	<li><a href="http://thelegendofrandom.com/blog/archives/date/2012/06" title="June 2012">June 2012</a> </li>
                    </ul>

                            </div>
            
            <div class="col3">
                                    <h3>Tags</h3>
                    <ul>
                    	<a href="http://thelegendofrandom.com/blog/archives/tag/adding-functionality" class="tag-link-29" title="1 topic" style="font-size: 8pt;">adding functionality</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/assembly-language" class="tag-link-18" title="1 topic" style="font-size: 8pt;">assembly language</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/binary" class="tag-link-26" title="1 topic" style="font-size: 8pt;">binary</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/code-cave" class="tag-link-27" title="1 topic" style="font-size: 8pt;">code cave</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/code-caves" class="tag-link-30" title="1 topic" style="font-size: 8pt;">code caves</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/cracking" class="tag-link-8" title="5 topics" style="font-size: 16pt;">cracking</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/crackme" class="tag-link-17" title="1 topic" style="font-size: 8pt;">crackme</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/ebook" class="tag-link-19" title="1 topic" style="font-size: 8pt;">ebook</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/exploting-binaries" class="tag-link-28" title="1 topic" style="font-size: 8pt;">exploting binaries</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/guide" class="tag-link-15" title="1 topic" style="font-size: 8pt;">Guide</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/olly" class="tag-link-14" title="2 topics" style="font-size: 11pt;">Olly</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/ollydbg" class="tag-link-10" title="4 topics" style="font-size: 14.666666666667pt;">ollydbg</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/olly-tutorial" class="tag-link-9" title="1 topic" style="font-size: 8pt;">olly tutorial</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/plugins" class="tag-link-11" title="1 topic" style="font-size: 8pt;">plugins</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/reverse-engineering-2" class="tag-link-7" title="3 topics" style="font-size: 13pt;">reverse engineering</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/sandbox" class="tag-link-13" title="1 topic" style="font-size: 8pt;">sandbox</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/tools" class="tag-link-4" title="1 topic" style="font-size: 8pt;">Tools</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/tutorial" class="tag-link-16" title="2 topics" style="font-size: 11pt;">tutorial</a>                     </ul>
                    
                            </div>
            <div class="clr"></div>
        

            <div class="clr"></div>
        </div>
        <div class="bottomleftcorner"><div class="bottomrightcorner"></div></div>
    </div>
</div>
<!-- Bottom Panel ends -->


	
    <div class="copyr">Copyright © 1996-2010 The Legend Of Random. All rights reserved.</div>    
    <div class="clr16"></div>
	</div>
    <div id="layoutbottom"></div>
</div>

<div id="credit" align="center">
	<abbr title="Jarrah/1.7">Jarrah</abbr> theme by <a href="http://www.templatesnext.org/">Templates Next</a>  
    | Powered by <a href="http://wordpress.org/">WordPress</a>  
</div>

<script type="text/javascript">
/* <![CDATA[ */
var SlimStatParams = {"ajaxurl":"http:\/\/thelegendofrandom.com\/blog\/wp-admin\/admin-ajax.php","ci":"YTo0OntzOjEyOiJjb250ZW50X3R5cGUiO3M6NDoicG9zdCI7czo4OiJjYXRlZ29yeSI7czo2OiIyMywzLDUiO3M6MTA6ImNvbnRlbnRfaWQiO2k6MTQyNDtzOjY6ImF1dGhvciI7czo2OiJSYW5kb20iO30=.d191444da2e33cbc639b501a63417ead"};
/* ]]> */
</script>
<script type="text/javascript" src="1424_fichiers/wp-slimstat.js"></script><canvas style="display: none;" height="35" width="35"></canvas>


</body></html>