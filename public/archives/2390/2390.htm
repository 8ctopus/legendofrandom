<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>R4ndom’s Tutorial #22: Code Caves and PE Sections «  The Legend Of Random</title>
<meta name="generator" content="WordPress 3.5.1">
<meta name="robots" content="follow, all">

<link rel="shortcut icon" href="http://thelegendofrandom.com/blog/wp-content/themes/jarrah/favicon.ico">
<link rel="stylesheet" href="2390_fichiers/style.css" type="text/css" media="screen">
<link rel="stylesheet" href="2390_fichiers/menu.css" type="text/css" media="screen">

<link rel="alternate" type="application/rss+xml" title="The Legend Of Random » R4ndom’s Tutorial #22: Code Caves and PE Sections Comments Feed" href="http://thelegendofrandom.com/blog/archives/2390/feed">
<script type="text/javascript" src="2390_fichiers/jquery.js"></script>
<script type="text/javascript" src="2390_fichiers/ajax.js"></script>
<script type="text/javascript" src="2390_fichiers/comment-reply.js"></script>
<link rel="prev" title="Click and Drag (and drag and drag and…)" href="http://thelegendofrandom.com/blog/archives/2545">
<link rel="next" title="R4ndom’s Guide to RadASM: Installing and Set Up" href="http://thelegendofrandom.com/blog/archives/2420">
<meta name="generator" content="WordPress 3.5.1">
<link rel="canonical" href="http://thelegendofrandom.com/blog/archives/2390">
<link rel="shortlink" href="http://thelegendofrandom.com/blog/?p=2390">
	<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>
<style type="text/css" id="syntaxhighlighteranchor"></style>

<script type="text/javascript" src="2390_fichiers/jquery_003.js"></script>
<script type="text/javascript" src="2390_fichiers/jquery_002.js"></script>
<script type="text/javascript" src="2390_fichiers/jquery_004.js"></script>
<script type="text/javascript" src="2390_fichiers/my-menu.js"></script>

<!-- this product is released under General Public License. Please see the attached file for details. You can also find details about the license at http://www.opensource.org/licenses/gpl-license.php -->
<script type="text/javascript">
/* <![CDATA[ */

jQuery(document).ready(function(){ 
    jQuery(document).pngFix(); 
});

/* ]]> */ 
</script>

</head>

<body>

<div id="wrapper" align="center">
	<div id="layouttop"></div>
    
    <!-- Header Starts -->
    <div id="header">
    	<div id="headerleft">
        	              	<h1><a href="http://thelegendofrandom.com/blog">The Legend Of Random</a> </h1><h3>Programming and Reverse Engineering</h3>
			      	   
        </div>
        <div id="headerright">
        	<div id="searchboxo">
        		<form method="get" id="searchform" action="http://thelegendofrandom.com/blog/">
    <input value="Search keywords" name="s" id="searchbox" onfocus="this.value=''" class="searchinput" type="text">
    <input class="submitbutton" value="" type="submit">
</form> 
            </div>
        </div>
    </div>
    <!-- Header Ends -->

    
    
    <div id="innerwrapper">
    	
        <!-- Main nav Starts here -->
        <div id="navouter">
            <div id="nav">

                                <ul class="lavalamp" id="menu1">
                <li class="page_item "><a href="file:///Y:/thelegendofrandom.com/site/thelegendofrandom.com/blog/index.html">Home</a> </li>
                <li class="page_item page-item-2"><a href="file:///Y:/thelegendofrandom.com/site/thelegendofrandom.com/blog/sample-page.html">Tutorials</a> </li>
<li class="page_item page-item-27"><a href="file:///Y:/thelegendofrandom.com/site/thelegendofrandom.com/blog/tools.html">Tools</a> </li>
<li class="page_item page-item-153"><a href="file:///Y:/thelegendofrandom.com/site/thelegendofrandom.com/blog/contact-2.html">Contact</a> </li>
<li class="page_item page-item-846"><a href="http://www.thelegendofrandom.com/forum/">Forum</a> </li>
<li class="page_item page-item-1790"><a href="file:///Y:/thelegendofrandom.com/site/thelegendofrandom.com/blog/challenges.html">Challenges</a> </li>
			
                <li style="left: 12px; width: 58px;" class="back"><div class="left"></div></li></ul>
            
            </div>
        </div>
        <!-- Main nav Ends -->
<div id="maincol">
		
        <div class="postwrap">
          	<h2 class="posttitle"><a href="http://thelegendofrandom.com/blog/archives/2390">R4ndom’s Tutorial #22: Code Caves and PE Sections</a> </h2>
          	<div class="postmeta">by <a href="http://thelegendofrandom.com/blog/archives/author/random" title="Posts by R4ndom" rel="author">R4ndom</a>  on Sep.20, 2012, under <a href="http://thelegendofrandom.com/blog/archives/category/intermediate" title="View all posts in Intermediate" rel="category tag">Intermediate</a> , <a href="http://thelegendofrandom.com/blog/archives/category/reverse-engineering" title="View all posts in Reverse Engineering" rel="category tag">Reverse Engineering</a> , <a href="http://thelegendofrandom.com/blog/archives/category/tutorials" title="View all posts in Tutorials" rel="category tag">Tutorials</a> </div>
            <div class="clr16"></div>
          	<div class="postcontent"><p>In this tutorial we will be 
talking about code caves as well as PE sections, and touching on the PE 
header. We will be adding code caves to two crackmes, both available in 
the download of this tutorial. We will also be using the Multimate 
Assembler plugin which is also available in the download, as well as 
LordPE and CFF Explorer which are available on the <span style="text-decoration: underline;"><span style="color: #0a77e1;"><a title="Tools" href="http://thelegendofrandom.com/blog/tools"><span style="color: #0a77e1; text-decoration: underline;">tools</span></a> </span></span></p> page. This tutorial, as well as all of my others, can be downloaded on the <a title="Tutorials" href="http://thelegendofrandom.com/blog/sample-page"><span style="text-decoration: underline; color: #0a77e1;">tutorials</span></a>  page.<p></p>
<p><span id="more-2390"></span></p>
<div style="margin-bottom:8em;"><span style="display:none;">.</span></div>
<h2><span style="color: #0a77e1;">Introduction</span></h2>
<p>Code caves are a way of adding our own code to a compiled binary. 
There are several reasons we may want to add our own code to a binary: 
we may want to add functionality (just see any of my tutorials on 
modifying binaries), we may want to change the way a program works by 
having it run our code instead of (or in addition to) the binary’s own 
code, or we may wish to make a form of keygenner, as we will in this 
tutorial.</p>
<p>Here’s how it works: First, we find an area in the binary that is not
 being used. This will be our ‘cave’. We then insert our own code in 
this empty space, using Olly to assemble the actual instructions. 
Finally, we add a jump to our code cave somewhere in the original binary
 so that our code gets executed. At the end of the code cave, we then 
return execution back to the original binary:</p>
<p style="text-align: center;"><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/CodeCave1.png"><img class="aligncenter  wp-image-2394" title="CodeCave" src="2390_fichiers/CodeCave1.png" alt="" height="462" width="466"></a> </p><p></p>
<p>Sometimes the target binary does not have enough free space to fit 
our added code. In that case, we can add a completely new section to the
 binary, set it to execute privileges, and then jump to this new 
section. We will be doing this in the second half of this tutorial.</p>
<p>First, we will use a code cave to make a keygenner of sorts. What I 
mean is, we are going to add code to display what the serial should be, 
based on the name entered, as opposed to showing the badboy message. 
This way, anyone who enters their username will have the crackme 
automatically tell them what the serial is. BAM! A simple keygenner!</p>
<h2><span style="color: #0a77e1;">Loading the Target</span></h2>
<p>The crackme we will use for this first part is called crackme.exe. Running the target, we see the main screen appear:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/129.png"><img class="aligncenter size-full wp-image-2396" title="The main screen" src="2390_fichiers/129.png" alt="" height="212" width="308"></a> </p><p></p>
<p>along with music that would probably make Mario jealous. Entering a 
username and registration code (as I’ve done here) and clikcing the 
“Check it!” button, we see the badboy:</p>
<p style="text-align: center;"><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/218.png"><img class="aligncenter  wp-image-2397" title="badboy1" src="2390_fichiers/218.png" alt="" height="137" width="171"></a> </p><p></p>
<p>Pretty straight forward. Now let’s load the target in Olly. First, of
 course, we see if we can take the easy way out and search for strings, 
and we see we are not disappointed:</p>
<p style="text-align: center;"><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/130.png"><img class="aligncenter  wp-image-2398" title="Search for strings" src="2390_fichiers/130.png" alt="" height="214" width="449"></a> </p><p></p>
<p>Double-clicking on the badboy brings us to that area of the code:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/219.png"><img class="aligncenter size-full wp-image-2399" title="Badboy area" src="2390_fichiers/219.png" alt="" height="392" width="686"></a> </p><p></p>
<p>Clicking on the first line of the badboy code, we can see that patching this app would be very easy:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/316.png"><img class="aligncenter size-full wp-image-2400" title="The patch" src="2390_fichiers/316.png" alt="" height="105" width="693"></a> </p><p></p>
<p>Of course, we’re not patching this app. What we want to do is change 
the target so that instead of a badboy, it shows us the proper 
registration code.</p>
<p>Scrolling up the binary, we see that the main decryption/conversion code starts at address 40112C:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/416.png"><img class="aligncenter size-full wp-image-2402" title="Main conversion code" src="2390_fichiers/416.png" alt="" height="442" width="668"></a> </p><p></p>
<p>It first get’s our entered username, then checks to make sure it’s at
 least 4 characters long. After this, the code begins to convert the 
username into a registration code. At the end of this, the converted 
registration code will be compared to our entered code to see if they 
match:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/515.png"><img class="aligncenter size-full wp-image-2403" title="Comparing the codes" src="2390_fichiers/515.png" alt="" height="258" width="679"></a> </p><p></p>
<p>GetDlgItemTextA get’s the entered code and lstrcmpA will compare it 
to the code that has been converted from our username. If they match, we
 fall through to the goodboy. If not, we jump to the badboy.</p>
<p>This means, at address 4012AB, the converted serial is pushed on to 
the stack to be compared with the entered code, pushed at the next 
address, 4012B0. We know that the entered code is pushed at 4012B0 
because we can see that in the GetDlgItemTextA call, 406949 is the 
buffer where the dialog item was saved, and at address 4012B0, we see 
that this same buffer was pushed in the call to lstrcmpA. Because of 
this, we know that 406549, the other address that is pushed in the 
lstrcmpA function call, is the address for the buffer that the converted
 code is in.</p>
<p><em>*** One thing that came up in running this crackme in Olly was 
access violations and exceptions that the target would not handle. To 
overcome this, you can either try running the target over again and it 
usually works, or you can temporarily remove the OllyAdvanced plugin 
from the plugins folder- we won’t be using that plugin in this tutorial 
anyway. ***</em></p>
<p>Let’s try stepping through the code to see if we’re right. Set a 
breakpoint at address 40112C (the beginning of the conversion routine) 
and run the app. Enter “R4ndom” in the username and anything you want in
 the reg. code. I entered “12121212″. Now click the “Check it!” button 
and Olly will break:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/614.png"><img class="aligncenter size-full wp-image-2408" title="Olly breaks" src="2390_fichiers/614.png" alt="" height="222" width="640"></a> </p><p></p>
<p>Single step until you get to address 401141. This is the instruction 
where the crackme is going to get our entered username. In the arguments
 passed to GetDlgItemTextA you can see that one of them is labeled 
‘buffer’. This is the buffer that the dialog item that is retrieved will
 go:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/79.png"><img class="aligncenter size-full wp-image-2409" title="Passing the buffer" src="2390_fichiers/79.png" alt="" height="205" width="626"></a> </p><p></p>
<p>We can see this happen by right-clicking on address 401134 (where the
 buffer address is pushed) and selecting “Follow in dump”-&gt;”Immediate
 Constant”. This will load the dump window beginning at address 406349, 
which we can see is filled with zeroes. Now step once over the 
GetDlgItemTextA call and you will see our username show up in the dump:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/87.png"><img class="aligncenter size-full wp-image-2410" title="Username in the dump" src="2390_fichiers/87.png" alt="" height="100" width="452"></a> </p><p></p>
<p>So now we know that our username will be kept at address 406349. 
Let’s let Olly know for future reference. Right-click the first byte in 
the dump window (address 406349) and choose ‘Label’. Type in “Username 
buffer” and click OK. Now, anytime this address is used in Olly, we will
 see our custom label:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/95.png"><img class="aligncenter size-full wp-image-2411" title="Olly replaces the label" src="2390_fichiers/95.png" alt="" height="172" width="692"></a> </p><p></p>
<p>Continue stepping and we will first jump over the message that the 
username must be over 4 characters. We then call lstrlenA. We don’t 
really need to know this but the encryption algorithm uses this value as
 part of the encryption process.</p>
<p>We then start stepping over the main encryption algorithm. You will 
see our username get transformed (several times). You can load the 
address in the dump if you would like to see them get modified in real 
time. We don’t really care about this algorithm in this tutorial as we 
are not going to use it. If we were making a keygen, this part would be 
our most important code.</p>
<p>Go ahead and step till address 401288 (or place a BP here and run the
 target). This section is where we compare the converted username 
against the serial we entered. The first thing the crackme does is to 
copy the converted string to a new location to compare it. We can see 
both the correct serial, as well as a new buffer address pushed as 
arguments to the lstrcpyA function:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/105.png"><img class="aligncenter size-full wp-image-2412" title="Comparing the serial" src="2390_fichiers/105.png" alt="" height="161" width="686"></a> </p><p></p>
<p>We then get the entered serial (with GetDlgItemTextA) and compare the two with lstrcmpA.</p>
<p>Now we can see if we’re right by restarting the target, entering our 
original username (R4ndom) and entering the correct serial we see in the
 diassembly for the serial to see if it works:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/1111.png"><img class="aligncenter size-full wp-image-2413" title="Trying the new serial" src="2390_fichiers/1111.png" alt="" height="212" width="308"></a> </p><p></p>
<p>and clicking “Check it!”:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/1210.png"><img class="aligncenter size-full wp-image-2414" title="The serial is correct" src="2390_fichiers/1210.png" alt="" height="217" width="306"></a> </p><p></p>
<p>we see we are on the right track.</p>
<p>Now, we want to begin planning our code cave.</p>
<h2><span style="color: #0a77e1;">Starting the Code Cave<br>
</span></h2>
<p>The first thing we have to do is decide where we will call our cave 
from. We must remember that wherever we put our jump (or call) will 
overwrite code, so we must either overwrite code we don’t mind losing or
 we need to copy the instructions we are going to overwrite and paste 
them at the end of the code cave, thereby running the overwritten 
instructions right before we return.</p>
<p>Since we aren’t actually going to check the entered serial with the 
real serial, we could overwrite the lstrcpyA call at address 401288. 
Another option is the lstrcmpA call at 4012B5. Frankly, we don’t really 
need anything after the correct serial is computed except the message 
box that’s going to display it. So let’s go ahead and use the space 
where the first lstrcpyA is at address 401288:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/135.png"><img class="aligncenter size-full wp-image-2416" title="Our jump will go here" src="2390_fichiers/135.png" alt="" height="115" width="626"></a> </p><p></p>
<p>Next we have to find a suitable place to put our own code into, our 
‘code cave’. Because the code section (as well as all other sections) 
has a minimum size a single block of code can be, unless the last block 
is exactly filled up with code, the remaining space will be filled with 
zeroes. If the code goes one byte over this block limit, an entirely new
 block will be created. The minimum a block of a section can be is 
stored in the PE header and is called <em>SectionAlignment</em>. This is
 set by default to 1000h, so if our code takes 1 byte or 1000-1 bytes, 
it will fit in the block. At one more byte, the operating system will 
allocate an additional block of 1000h bytes. If this happens, we will 
have our last block of code contain one byte of code and an additional 
section of FFFh zeroes. This is where we normally stick our code cave.</p>
<p>Normally, in a small program, we can simply scroll until we find this
 long series of zeroes and put it there.Other times we are not so lucky.
 Occasionally, there is not enough space to fit our code into. When this
 happens, we must create a new section ourselves, something we will do 
in the second part of this&nbsp; tutorial.</p>
<p>Some may wonder if we could put our cave in another section already 
in the target, such as .data, .rsrc, or the .rdata sections. 
Theoretically you could, but the problem arises that these sections are 
not set up to execute code. Each section in a binary has a certain set 
of characteristics set up for read-only, write, executable etc. The 
.code section is usually the only section with the ‘executable’ flag 
set. We could put our cave in another section, but we would have to 
manually set this bit to allow code to be executable in it.</p>
<p>Fortunately, in this first part, scrolling down several pages we see we have plenty of room:</p>
<p style="text-align: center;"><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/136.png"><img class="aligncenter  wp-image-2426" title="Empty space for our cave" src="2390_fichiers/136.png" alt="" height="215" width="524"></a> </p><p></p>
<p>So we will put our code cave starting at address 4041B0 (I usually 
try to put a buffer between the end of code and the beginning of the 
cave, just in case I need to change something):</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/220.png"><img class="aligncenter size-full wp-image-2427" title="Start of our cave" src="2390_fichiers/220.png" alt="" height="172" width="425"></a> </p><p></p>
<p>Now we need to think about what our code cave is going to do. First, 
it will load the correct (converted) serial into a register, or rather 
the <em>address</em> of this serial. It will then push this address onto
 the stack, along with a couple of additional values that the message 
box requires. We will then jump back to the original code directly to 
the call to MessageBoxA. This allows us to use the targets code for 
calling the MessageBox function. It also allows the target to continue 
going after the message box is displayed. As far as the target is 
concerned, it has just shown us the badboy, so after we click OK it will
 simply continue as if we pressed the OK button on the badboy.</p>
<p>In order to see how we need to set up the variables for our call to 
MessageBoxA, we can simply look at the target and see how it was done 
originally:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/317.png"><img class="aligncenter size-full wp-image-2428" title="Original call to message box" src="2390_fichiers/317.png" alt="" height="132" width="692"></a> </p><p></p>
<p>Here, we can see where the target calls the badboy. First, at address
 4012D4, we see the value of 10h pushed on to the stack. Looking to the 
right where Olly has given us some labels, we see that this is the type 
of buttons, icons and style that this message box will be, namely a 
modal dialog with an OK button and an asterisk as the icon.</p>
<p>Next, we push the address for the memory that contains the caption 
(title) of the box. Here, we can push anything we want, so we’ll just 
push the same thing they did. If we wanted to be fancy, we could create 
our own string to display for the caption, but here we’ll just stick 
with what we’ve got.</p>
<p>Next we push the address of the memory that contains our actual text 
to be displayed in the box. This is where we’ll push the address of the 
correct serial. Looking back where we dumped earlier, we see that this 
address is 406749.</p>
<p>Lastly, we push the handle for the owner’s window. In this case, we’ll just push the handle that was originally pushed.</p>
<p>Finally, we will simply jump to the address of the call to MessageBoxA in the original target’s code at address 4012E3:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/417.png"><img class="aligncenter size-full wp-image-2425" title="Original call to MessageBox" src="2390_fichiers/417.png" alt="" height="103" width="689"></a> </p><p></p>
<p>So let’s start coding. First, click once to select the line at 
address 4041B0. Now hit the space bar (or right-click and select 
“Assemble”) which brings up our assembler window. Now enter our first 
instruction, “push 10″:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/516.png"><img class="aligncenter size-full wp-image-2429" title="Entering the first instruction" src="2390_fichiers/516.png" alt="" height="197" width="570"></a> </p><p></p>
<p>After doing this and clicking the Assemble button, our new 
instruction will show up in red and the assemble window will remain 
open, waiting for our next instruction:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/615.png"><img class="aligncenter size-full wp-image-2430" title="Assembling the first instruction" src="2390_fichiers/615.png" alt="" height="192" width="599"></a> </p><p></p>
<p>Now, enter our second line of code, “push 406306″. This will push the
 “Bad boy” caption for our message box. Click Assemble and enter the 
next line, “Push 406749″. This will push the address of our converted 
serial. Finally, enter “push dword ptr ss:[ebp+8]“, which pushes the 
handle to the owner’s window. Normally we must be very careful when 
jumping to our cave and pushing values from the stack as the stack could
 easily be changed with the entire process of calling our cave. But in 
this case, we have not modified the stack, so our value still remains 
where we expect it. Now, after pressing Assemble, we should see most of 
our cave done:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/710.png"><img class="aligncenter size-full wp-image-2431" title="Amost done" src="2390_fichiers/710.png" alt="" height="228" width="548"></a> </p><p></p>
<p>The last thing we need to do is call back into our original code in order to display the message box:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/88.png"><img class="aligncenter size-full wp-image-2432" title="Call back to the target" src="2390_fichiers/88.png" alt="" height="104" width="547"></a> </p><p></p>
<p>Here, we added the jump to 40115A, back to the original code’s call to MessageBoxA.</p>
<p>Now that we have our cave set up, we need to jump to it. Press cancel
 to close the assemble window, go back to address 401288, select the 
line and hit the space bar. Enter “jmp 4041B0″. This jumps to our cave:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/96.png"><img class="aligncenter size-full wp-image-2433" title="Jump to our cave" src="2390_fichiers/96.png" alt="" height="77" width="589"></a> </p><p></p>
<p>Let’s try it out. Set a breakpoint at address 401288 (the jump to our
 cave) and run the app. Enter a username and any serial and click “Check
 it!”. I entered “R4ndom” (of course). Olly should now break at the line
 that jumps to the code cave. Step into this jump and we will land at 
our cave:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/106.png"><img class="aligncenter size-full wp-image-2434" title="Pausing at the cave" src="2390_fichiers/106.png" alt="" height="72" width="549"></a> </p><p></p>
<p>You will notice that Olly is displaying the correct serial at address
 4041B7, so we know we’re on the right track. Single stepping over the 
code, you will see the proper arguments pushed on to the stack, and 
finally, our jump back to the target’s code. Once you step over the call
 to MessageBoxA, you will see our correct serial in the message box:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/1112.png"><img class="aligncenter size-full wp-image-2435" title="Our first keygenner" src="2390_fichiers/1112.png" alt="" height="214" width="309"></a> </p><p></p>
<p>We have now created our own keygenner! You should save the entire 
binary back to the executable to save it so you have it stored on disk. 
Of course, if we were going to send this out into the wild, we would 
want to clean it up a bit, adding a real caption and a description of 
what this box is telling us, but for now, it’s a beautiful thing.</p>
<h2><span style="color: #0a77e1;">Our Second Code Cave</span></h2>
<p>Now let’s try a little tougher example. Load up Keygenme.exe into Olly and run it:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/140.png"><img class="aligncenter size-full wp-image-2478" title="Running the keygenme" src="2390_fichiers/140.png" alt="" height="197" width="348"></a> </p><p></p>
<p>and clicking the “Check” button:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/222.png"><img class="aligncenter size-full wp-image-2479" title="Badboy displayed" src="2390_fichiers/222.png" alt="" height="204" width="348"></a> </p><p></p>
<p>Well, that seems pretty straight forward, however this time we are 
going to assume that there is not enough space in the binary to insert a
 code cave, so we are going to make our own section.</p>
<p><em>*** In a future tutorial, we will be making this binary into a full-fledged keygen, so stay tuned. ***</em></p>
<h2><span style="color: #0a77e1;">Looking at The PE File Sections<br>
</span></h2>
<p>This keygenme does not technically require a new section, but I 
wanted to go over the process, not only to understand how to manually 
add a section, but also to provide insight into how a PE file is 
structured. This will help further down the road when working with 
packers, malware, dll injection and so forth.</p>
<p>Here is an image of the complete keygen file, dumped from a hex editor. You can click on the image if you want to see it bigger:</p>
<p style="text-align: center;"><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/Hex-Dump.png"><img class="aligncenter  wp-image-2562" title="Hex Dump" src="2390_fichiers/Hex-Dump.png" alt="" height="2701" width="304"></a> </p><p></p>
<p>We can match these sections up with the graph shown in CFF Explorer, under “Section Headers”:</p>
<p style="text-align: center;"><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/cff.png"><img class="aligncenter  wp-image-2563" title="cff" src="2390_fichiers/cff.png" alt="" height="143" width="722"></a> </p><p></p>
<p>Notice this binary has four sections: .text where our code goes, 
.rdata for our read-only data (strings and whatnot), .data for our 
read-write data (global variables) and .rsrc where our resources are 
stored (buttons, bitmaps, dialogs…). There is also one fifth section, 
the PE header, shown at the top of the dump. This is not shown as a 
section, but in the binary, it could be thought of as one.</p>
<p>The start addresses and sizes are shown in the Raw Size and Raw 
Address columns. This signifies where the data is on disk in its raw 
form. We can see in the CFF graph that the .text section starts at 0400 
in the binary and has a length of 0400. Looking up at the dump, starting
 at address 0400, we see the .text section begins and ends at address 
07FF. This makes the size 0400 bytes.</p>
<p>Each section has a starting address and a size in the ‘raw’ columns, 
telling us where they reside in the binary. When the Windows loader 
loads this binary into memory, it copies these sections from disk and 
places them into memory. The ‘virtual’ columns represents where this 
data will be copied into memory and how large the space will occupy. We 
can see in the .text section the beginning address will be 01000 and the
 size of the copied data will be 030A. This means that when the loader 
loads this binary from disk, it will load the data beginning at 0400 in 
the binary into memory beginning at memory address 01000. It will copy 
030A bytes from disk, which is smaller than the region allocated in 
memory, so there will be 0CF6 bytes at the end of this section with 
zeroes in it (01000 is the size of this memory space, 30A the size of 
the data. 01000 – 030A = 0CF6).</p>
<p>You may say, “Wait a minute, why is the binary always loaded into 
address 401000 in Olly, and not at address 01000?” The reason has to do 
with a field in the PE header called ImageBase. Clicking on the 
“Optional Header” in CFF, we see that the ImageBase is set to 040000:</p>
<p style="text-align: center;"><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/713.png"><img class="aligncenter  wp-image-2573" title="Image base" src="2390_fichiers/713.png" alt="" height="255" width="362"></a> </p><p></p>
<p>this tells the loader to load in all sections, but start at address 
040000. The Windows loader does not have to load the binary into this 
address- it is simply where the application <em>would like</em> to be placed. Most of the time, the loader will comply.</p>
<p><em>*** If you have the randomize base address setting enabled in 
Visual Studio, the base address will be random, so it will probably not 
be loaded at address 401000. You can always tell if this has been set in
 a binary when you load it in Olly and the beginning of the binary is at
 some weird starting address, such as 0×1143679. ***</em></p>
<p>The next section, .data, which begins on disk at offset 0800 (and a 
size of 0200) will be copied into memory beginning at memory address 
02000, and 0196 bytes will be copied. Since the next section begins at 
03000, this section also has a size in memory of 01000 bytes, so 0804 
bytes will be left at the end.</p>
<p>The section at the end of the .text section is where we would 
normally put our code cave, and in this case it would be fine. The 
problem arises when the code on disk is almost the same size as the 
memory space allotted for this code. If the Loader reserves 01000 bytes 
for the code, and the code takes up 0988 bytes, this would only leave 
012 bytes for our cave. Because this would not be enough room, we must 
add a section to put our cave into.</p>
<h2><span style="color: #0a77e1;">Manually Adding a New Section</span></h2>
<p>We are going to use CFF Explorer to add our section. Go ahead and 
load the keygenme into CFF if you haven’t already and click on the “File
 Header” tab:</p>
<p style="text-align: center;"><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/158.png"><img class="aligncenter  wp-image-2565" title="Number of sections" src="2390_fichiers/158.png" alt="" height="178" width="598"></a> </p><p></p>
<p>We can see that there are clearly four sections in this binary. 
Clicking on the “Section Headers” we see what we saw earlier, namely the
 information about each section:</p>
<p style="text-align: center;"><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/227.png"><img class="aligncenter  wp-image-2566" title="The section headers" src="2390_fichiers/227.png" alt="" height="171" width="460"></a> </p><p></p>
<p>Now right-click in this window and choose “Add Section (Empty Space)” :</p>
<p style="text-align: center;"><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/324.png"><img class="aligncenter  wp-image-2567" title="Adding space" src="2390_fichiers/324.png" alt="" height="268" width="369"></a> </p><p></p>
<p>In the space dialog, enter 100h, as we wish our new section to have 100 (256) bytes:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/424.png"><img class="aligncenter size-full wp-image-2569" title="Adding space" src="2390_fichiers/424.png" alt="" height="166" width="289"></a> </p><p></p>
<p>Clicking OK we will see our new section show up:</p>
<p style="text-align: center;"><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/522.png"><img class="aligncenter  wp-image-2570" title="New section shows up" src="2390_fichiers/522.png" alt="" height="149" width="395"></a> </p><p></p>
<p>Let’s rename our section. Double-click in the name field and enter “.r4ndom” and click return:</p>
<p style="text-align: center;"><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/714.png"><img class="aligncenter  wp-image-2574" title="The new section" src="2390_fichiers/714.png" alt="" height="180" width="723"></a> </p><p></p>
<p>Also notice that the initial size values have been provided; The 
virtual size is 0100, the virtual address is 05000, the raw size is 0200
 and the raw address is 01600. Let’s take these one at a time:</p>
<p><strong><span style="color: #ff6600;">VirtualSize:</span></strong> This is the amount we placed in the size dialog.<br>
<strong><span style="color: #ff6600;">VirtualAddress:</span></strong> 
Notice that the default size for a section is 01000 bytes in memory. 
This value is set in the “SectionAlignment” field in the PE header.<br>
<strong><span style="color: #ff6600;">RawSize:</span></strong> Notice 
that the size on disk is 0200, not 0100 which we would expect. This is 
because there is a minimum amount of space that a section can take on 
disk. This value is set in the “FileAlignment” field in the PE header.<br>
<strong><span style="color: #ff6600;">RawAddress:</span></strong> If you
 look back at our hex dump of the binary, you will see that it 
originally ended at 015FF. Logically, our new section would start right 
after this, at address 01600.</p>
<p style="text-align: center;"><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/812.png"><img class="aligncenter  wp-image-2575" title="Section alignments" src="2390_fichiers/812.png" alt="" height="347" width="393"></a> </p><p></p>
<p>Here we can see the memory and disk alignments.</p>
<p>One last setting we need is to make our new section executable, 
meaning we need to allow code to run in it, as the default for a new 
section is for it just to be data. Right-click the new section and 
select “Change Section Flags.” We want to set the “Is Executable” flag:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/1116.png"><img class="aligncenter size-full wp-image-2580" title="Change section flag" src="2390_fichiers/1116.png" alt="" height="347" width="337"></a> </p><p></p>
<p>Now our code cave will be able to run in memory.</p>
<p>Before we can add our section, we must update the size of the binary 
(as we’ve added 0100 bytes) as well as the header. Right-click the line 
with our new section on it and select “Rebuild Image Size”. This will 
add 0200 bytes on to the total size of the binary. Next, right-click and
 choose “Rebuild PE Header.” This updates our number of sections field, 
as well as some other fields necessary to load the new section:</p>
<p style="text-align: center;"><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/99.png"><img class="aligncenter  wp-image-2577" title="Number of sections increases" src="2390_fichiers/99.png" alt="" height="186" width="454"></a> </p><p></p>
<p>Finally, we must save our changes. Click “File”-&gt;”Save As” and 
choose “keygenme2.exe” for the name. Now load the new file into Olly and
 bring up the Memory Window:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/1010.png"><img class="aligncenter size-full wp-image-2578" title="New section in Olly" src="2390_fichiers/1010.png" alt="" height="225" width="501"></a> </p><p></p>
<p>We can see that Olly recognizes our new section, and we are now ready to investigate where we will call our code cave from…</p>
<h2><span style="color: #0a77e1;">Investigating the Target</span></h2>
<p>OK. Let’s take a look at our target and figure out where to call our 
cave. Return to the entry point (ctrl-G and enter 401000) and do a 
search for intermodular calls:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/1114.png"><img class="aligncenter size-full wp-image-2489" title="Intermodular calls" src="2390_fichiers/1114.png" alt="" height="286" width="509"></a> </p><p></p>
<p>The GetDlgItemTextA looks as good as any. Click on the first and we see we’re in the general area:</p>
<p style="text-align: center;"><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/1212.png"><img class="aligncenter  wp-image-2490" title="Username checks" src="2390_fichiers/1212.png" alt="" height="329" width="642"></a> </p><p></p>
<p>We can see that at first the target get’s our entered user name and 
stores it at address 403105 (this value is pushed at address 4010F8), 
then checks it for length. Obviously, it needs to be between 1 and 16 
characters. After that, the target checks to make sure we entered at 
least one character in the serial field:</p>
<p style="text-align: center;"><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/1310.png"><img class="aligncenter  wp-image-2491" title="Verify serial" src="2390_fichiers/1310.png" alt="" height="138" width="628"></a> </p><p></p>
<p>But you may have noticed there was a quite little call between these 
two code groups at address 40113E. This is the call to our encryption 
routine:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/148.png"><img class="aligncenter size-full wp-image-2492" title="Call to encryption routine" src="2390_fichiers/148.png" alt="" height="515" width="703"></a> </p><p></p>
<p>Go ahead and place a breakpoint at this address (40113E) and run the 
target. Enter a Name (R4ndom) and a serial (doesn’t matter) and click 
“Check” and Olly breaks at our breakpoint. Now, before we continue, 
let’s load the memory where our name was stored into the dump. Go to 
address 4010F8, right-click and select “Follow in dump”-&gt;”Immediate 
constant”. Now we see our username in the dump:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/155.png"><img class="aligncenter size-full wp-image-2493" title="Username in dump" src="2390_fichiers/155.png" alt="" height="95" width="447"></a> </p><p></p>
<p>Now let’s single step over the call at address 40113E and we will see some strange characters appear in our dump:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/164.png"><img class="aligncenter size-full wp-image-2494" title="Weird characters" src="2390_fichiers/164.png" alt="" height="84" width="460"></a> </p><p></p>
<p>We can safely assume that this is the first part of the encryption 
routine. Single-stepping down a couple lines to address 40114E, we see 
that there is another call to this encryption section. Stepping over 
this line, we see the weird characters in the dump turn into the correct
 serial:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/173.png"><img class="aligncenter size-full wp-image-2495" title="The correct serial." src="2390_fichiers/173.png" alt="" height="76" width="452"></a> </p><p></p>
<p><em>*** You may ask, “Is it always this easy”? No. We got lucky on 
this one. Though it would not have been very difficult to step through 
the encryption code to find out where this serial was being stored, 
which is exactly what I did when first going through this crackme. ***</em></p>
<p>Now we know (or at least assume) that the correct serial is known by 
the time we get to address 40115A, and it is stored at location 403114. 
We can test our theory, though, just to be sure:</p>
<p style="text-align: center;"><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/182.png"><img class="aligncenter  wp-image-2496" title="Trying the new serial" src="2390_fichiers/182.png" alt="" height="177" width="313"></a> </p><p></p>
<p>and we see we were correct:</p>
<p style="text-align: center;"><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/191.png"><img class="aligncenter  wp-image-2497" title="We were right" src="2390_fichiers/191.png" alt="" height="158" width="279"></a> </p><p></p>
<h2><span style="color: #0a77e1;">Adding the Code Cave<br>
</span></h2>
<p>I have set a breakpoint at address 401153 and deleted my others. We 
know that at this point, memory location 403114 contains our correct 
serial. So we will place our call here. We are pretty fortunate here in 
that we also have a message box call right after our jump that we can 
use to show our serial:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/20.png"><img class="aligncenter size-full wp-image-2498" title="Where our call will go" src="2390_fichiers/20.png" alt="" height="190" width="698"></a> </p><p></p>
<p>We know our code cave space starts at 405000, as this is the 
beginning of the section we created, so let’s go ahead and add our jump:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/2110.png"><img class="aligncenter size-full wp-image-2499" title="Jump to our cave" src="2390_fichiers/2110.png" alt="" height="252" width="384"></a> </p><p></p>
<p>Now let’s create our cave. Make Olly display our new section by going to address 405000:</p>
<p style="text-align: center;"><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/223.png"><img class="aligncenter  wp-image-2501" title="Our cave starts here" src="2390_fichiers/223.png" alt="" height="136" width="274"></a> </p><p></p>
<p>Now we are going to do the same thing we did in the first part of 
this tutorial, but we are going to use a new plugin called MUltimate 
Assembler. Make sure this has been copied into your Olly plugin’s 
folder, and select “MUltimate Assembler”-&gt;”MUltimate Assembler” from 
the plugins drop-down menu:</p>
<p style="text-align: center;"><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/231.png"><img class="aligncenter  wp-image-2502" title="Opening multiasm" src="2390_fichiers/231.png" alt="" height="358" width="444"></a> </p><p></p>
<p><em>*** One note: if you are using the&nbsp; OllyAdvanced plugin, you
 must turn off the “Kill %s%s bug” option or the assembled code in 
multi-asm may not work properly. ***</em></p>
<p>This time, in order to show the ease to which you can assemble with 
this plugin, we will change the caption and text in our message box. 
Let’s begin coding. First, MUltimate Assmembler requires that we put in a
 starting address:</p>
<p><strong><span style="color: #ff6600;">&lt;405000&gt;</span></strong></p>
<p>I can put anything in here, so I put the beginning of our cave where 
the initial jump will jump to. Next I start coding the actual cave:</p>
<p><strong><span style="color: #ff6600;">push 10</span></strong></p>
<p>This pushes the message box style. Then we push our caption. I will 
define the caption string towards the end, but for now we can push the 
address:</p>
<p><strong><span style="color: #ff6600;">push @caption</span></strong></p>
<p>Next we push the text. This is the same deal as the caption:</p>
<p><strong><span style="color: #ff6600;">push @text</span></strong></p>
<p>Finally, we push the handle. In this case, I’m just going to push NULL, as the message box call doesn’t have to have a handle:</p>
<p><strong><span style="color: #ff6600;">xor eax, eax</span></strong><br>
<strong><span style="color: #ff6600;">push eax</span></strong></p>
<p>Now we will put our jump back to the original MessageBoxA call:</p>
<p><strong><span style="color: #ff6600;">jmp 40117A</span></strong></p>
<p>You screen should look like this so far:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/149.png"><img class="aligncenter size-full wp-image-2505" title="First part of cave" src="2390_fichiers/149.png" alt="" height="213" width="190"></a> </p><p></p>
<p>Next, let’s add our caption:</p>
<p><strong><span style="color: #ff6600;">@caption:</span></strong><br>
<strong><span style="color: #ff6600;">&nbsp;”Correct serial.\0″</span></strong></p>
<p>and our message box text:</p>
<p><strong><span style="color: #ff6600;">@text:</span></strong><br>
<strong><span style="color: #ff6600;">“The correct serial is: “</span></strong></p>
<p>Notice I did not add a zero at the end of this string. this is 
because we are going to add the text for our serial after it. Message 
box will start at the beginning of this string and go until it reaches a
 zero. We are going to manually add the correct serial on to the end of 
this string and end that with a zero. This way, when message box is 
displaying the text, it will keep going into the string we add, and will
 not stop until after the correct serial is displayed as well. So next 
we must add space to copy in our correct serial:</p>
<p><strong><span style="color: #ff6600;">@serial:</span></strong><br>
<strong><span style="color: #ff6600;">db 00</span></strong></p>
<p>Here, I have added an empty byte that will be the first character of 
our serial. since I don’t know the length of the serial, I simply put 
one byte here, and I will dynamically add the additional bytes of the 
correct serial, followed by a zero.</p>
<p><em>*** The maximum number of bytes you can use in MUltimate Assembler after the ‘db’ command is 16. ***</em></p>
<p>Because this string is at the end of our cave, I can add as many 
characters as I like to the end, as long as it ends with a zero (and 
does not go past the end of the section).</p>
<p>Alright, up to this point your cave should look like this (I also added some comments):</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/321.png"><img class="aligncenter size-full wp-image-2509" title="Second stage of code cave" src="2390_fichiers/321.png" alt="" height="440" width="420"></a> </p><p></p>
<p><em> *** You may want to save your assembly at this point- 
right-click the main tab and select “Save to file”. Now, if anything 
happens, you can just reload it. ***</em></p>
<p>Before we’re done, we must copy the original serial into our string 
that will display the text in our message box. To do this, normally we 
would use lstrcpy, but since we can only use the functions that are 
available to the target (at least easily), adn this binary does not use 
that function, we will do it by hand. Insert the following instructions 
at the beginning of our assembly window:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/done.png"><img class="aligncenter size-full wp-image-2510" title="Final assembly" src="2390_fichiers/done.png" alt="" height="440" width="420"></a> </p><p></p>
<p><em>*** If you have any trouble, I have included the code for this 
code cave in the download for this tutorial. Just open the MUltimate 
Assembler plugin and load the file “Keygenme.asm”. ***</em></p>
<p>Go ahead and click “Assemble”. If there are no errors, you will see 
the code in your binary assembled at 405000. If there is an error, the 
error type will be displayed and the line the error at will receive the 
cursor. If all went well, you should see something like this:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/420.png"><img class="aligncenter size-full wp-image-2511" title="assmebled cave" src="2390_fichiers/420.png" alt="" height="365" width="555"></a> </p><p></p>
<p>You will notice that Olly cannot figure out that the end of the cave 
is strings, so he is showing the data as code. Use the AnalyzeThis! 
plugin (Right-click-&gt;AnalyzeThis!) and Olly will get it straight:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/519.png"><img class="aligncenter size-full wp-image-2512" title="corrected cave" src="2390_fichiers/519.png" alt="" height="169" width="580"></a> </p><p></p>
<p>Save our new patched file as “keygenme3.exe”. Remember, when 
selecting “Copy to executable”, choose “All modifications” so that the 
jump from address 401153 is included, as well as our code cave.</p>
<p>Now, go ahead and run the target. Enter your desired username and click “Check”:</p>
<p><a href="http://thelegendofrandom.com/blog/wp-content/uploads/2012/09/618.png"><img class="aligncenter size-full wp-image-2513" title="Success" src="2390_fichiers/618.png" alt="" height="212" width="348"></a> </p><p></p>
<p>We now have our own keygenme! Well, sort of. In a future tutorial we 
will be creating an actual keygenme from this crackme, but for now, this
 works pretty well…</p>
<p>-Till next time</p>
<p>R4ndom</p>
</div>
          	<div class="clr"></div>
          	<span class="linkpages"></span><div class="cleared"></div>
          	
			            
				<div class="roundcornrrbox">
                   	<div class="topleftcorner"><div class="toprightcorner"></div></div>
                    <div class="roubcornrcontent">
            			<span class="posttags-single">No tags</span>
                    	<div class="clr"></div>
                    </div>
                    <div class="bottomleftcorner"><div class="bottomrightcorner"></div></div>
                </div>                        
                        
			
			        	
            <div class="clr"></div>
        </div> <!-- Closes topPost -->
		<small></small>

		<div id="comments">
			            <!-- WP 2.7 and above -->
            <div class="roundcornrrbox">
	<div class="topleftcorner"><div class="toprightcorner"></div></div>
	<div class="roubcornrcontent">

		<h3 id="commentstitle">9 Comments for this entry</h3>
	<ul class="commentlist">
		   <li class="comment even thread-even depth-1" id="li-comment-4383">
     <div id="comment-4383">

			<div class="commentbody">
            
                <a class="gravatar">
                	<img alt="" src="2390_fichiers/ad516503a11cd5ca435acc9bb6523536.png" class="avatar avatar-60 photo avatar-default" height="60" width="60">                </a>             
            
			<cite>symeon</cite> 
						<br>
			<small class="commentmetadata"><a href="#comment-4383" title="">September 20th, 2012 on 7:12 pm</a>  </small>

			<p>Wow, fantastic post, thanks for that!<br>
Cheers.</p>
			</div><div class="cleared"></div>

      <div class="reply">
         <a class="comment-reply-link" href="http://thelegendofrandom.com/blog/archives/2390?replytocom=4383#respond" onclick='return addComment.moveForm("comment-4383", "4383", "respond", "2390")'>Reply</a>       </div>
     </div>
</li>
   <li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-4389">
     <div id="comment-4389">

			<div class="commentbody">
            
                <a class="gravatar">
                	<img alt="" src="2390_fichiers/261a01e1b07b7387b0d675322199fb58.png" class="avatar avatar-60 photo" height="60" width="60">                </a>             
            
			<cite><a href="http://corkami.com/" rel="external nofollow" class="url">Ange</a> </cite> 
						<br>
			<small class="commentmetadata"><a href="#comment-4389" title="">September 20th, 2012 on 9:34 pm</a>  </small>

			<p>Multimate is awesome to keep useful snippets under the hood, but 
if you want to do some very serious ASM patching, try Iczelion’s 
CodeSnippetCreator – it’s just much more powerful!</p>
			</div><div class="cleared"></div>

      <div class="reply">
         <a class="comment-reply-link" href="http://thelegendofrandom.com/blog/archives/2390?replytocom=4389#respond" onclick='return addComment.moveForm("comment-4389", "4389", "respond", "2390")'>Reply</a>       </div>
     </div>
<ul class="children">
   <li class="comment byuser comment-author-random bypostauthor even depth-2" id="li-comment-4393">
     <div id="comment-4393">

			<div class="commentbody">
            
                <a class="gravatar">
                	<img alt="R4ndom" src="2390_fichiers/R4ndom_avatar-60x60.png" class="avatar avatar-60 photo" height="60" width="60">                </a>             
            
			<cite>R4ndom</cite> 
						<br>
			<small class="commentmetadata"><a href="#comment-4393" title="">September 20th, 2012 on 11:59 pm</a>  </small>

			<p>I agree with you that, when dealing with snippets, 
CodeSnippetCreater is far and away more feature rich, but in the context
 of adding code caves to Olly, I will choose MUltimate Assembler every 
time.</p>
			</div><div class="cleared"></div>

      <div class="reply">
         <a class="comment-reply-link" href="http://thelegendofrandom.com/blog/archives/2390?replytocom=4393#respond" onclick='return addComment.moveForm("comment-4393", "4393", "respond", "2390")'>Reply</a>       </div>
     </div>
</li>
</ul>
</li>
   <li class="comment odd alt thread-even depth-1" id="li-comment-4508">
     <div id="comment-4508">

			<div class="commentbody">
            
                <a class="gravatar">
                	<img alt="" src="2390_fichiers/9c2c936220fc36782008dcc4d275f6c2.png" class="avatar avatar-60 photo" height="60" width="60">                </a>             
            
			<cite>Hanan</cite> 
						<br>
			<small class="commentmetadata"><a href="#comment-4508" title="">September 24th, 2012 on 7:02 am</a>  </small>

			<p>Seems that the second file Keygenme2.exe has antidebugging routines and doesn’t work good at my win7. <img src="2390_fichiers/icon_sad.gif" alt=":(" class="wp-smiley"> </p>
<p>Good work.</p>
			</div><div class="cleared"></div>

      <div class="reply">
         <a class="comment-reply-link" href="http://thelegendofrandom.com/blog/archives/2390?replytocom=4508#respond" onclick='return addComment.moveForm("comment-4508", "4508", "respond", "2390")'>Reply</a>       </div>
     </div>
</li>
   <li class="comment even thread-odd thread-alt depth-1" id="li-comment-4623">
     <div id="comment-4623">

			<div class="commentbody">
            
                <a class="gravatar">
                	<img alt="" src="2390_fichiers/7bfd045465fc84d17174a23fe990c19e.png" class="avatar avatar-60 photo" height="60" width="60">                </a>             
            
			<cite>Lee</cite> 
						<br>
			<small class="commentmetadata"><a href="#comment-4623" title="">September 27th, 2012 on 9:08 pm</a>  </small>

			<p>Second code cave (keygenme.exe) quits if it detects a debugger, but it’s easy enough to patch out:</p>
<p>Address 004012B2: JE to JMP<br>
Or NOP the whole thing, etc.</p>
			</div><div class="cleared"></div>

      <div class="reply">
         <a class="comment-reply-link" href="http://thelegendofrandom.com/blog/archives/2390?replytocom=4623#respond" onclick='return addComment.moveForm("comment-4623", "4623", "respond", "2390")'>Reply</a>       </div>
     </div>
</li>
   <li class="comment odd alt thread-even depth-1" id="li-comment-4677">
     <div id="comment-4677">

			<div class="commentbody">
            
                <a class="gravatar">
                	<img alt="" src="2390_fichiers/7bfd045465fc84d17174a23fe990c19e.png" class="avatar avatar-60 photo" height="60" width="60">                </a>             
            
			<cite>Lee</cite> 
						<br>
			<small class="commentmetadata"><a href="#comment-4677" title="">September 28th, 2012 on 8:26 pm</a>  </small>

			<p>Also, why “xor eax, eax; push eax” instead of “push 0″?</p>
			</div><div class="cleared"></div>

      <div class="reply">
         <a class="comment-reply-link" href="http://thelegendofrandom.com/blog/archives/2390?replytocom=4677#respond" onclick='return addComment.moveForm("comment-4677", "4677", "respond", "2390")'>Reply</a>       </div>
     </div>
<ul class="children">
   <li class="comment byuser comment-author-random bypostauthor even depth-2" id="li-comment-4684">
     <div id="comment-4684">

			<div class="commentbody">
            
                <a class="gravatar">
                	<img alt="R4ndom" src="2390_fichiers/R4ndom_avatar-60x60.png" class="avatar avatar-60 photo" height="60" width="60">                </a>             
            
			<cite>R4ndom</cite> 
						<br>
			<small class="commentmetadata"><a href="#comment-4684" title="">September 28th, 2012 on 10:09 pm</a>  </small>

			<p>Because I forgot.</p>
			</div><div class="cleared"></div>

      <div class="reply">
         <a class="comment-reply-link" href="http://thelegendofrandom.com/blog/archives/2390?replytocom=4684#respond" onclick='return addComment.moveForm("comment-4684", "4684", "respond", "2390")'>Reply</a>       </div>
     </div>
</li>
</ul>
</li>
   <li class="comment odd alt thread-odd thread-alt depth-1" id="li-comment-5382">
     <div id="comment-5382">

			<div class="commentbody">
            
                <a class="gravatar">
                	<img alt="" src="2390_fichiers/ad516503a11cd5ca435acc9bb6523536.png" class="avatar avatar-60 photo avatar-default" height="60" width="60">                </a>             
            
			<cite>kdma</cite> 
						<br>
			<small class="commentmetadata"><a href="#comment-5382" title="">October 12th, 2012 on 12:38 pm</a>  </small>

			<p>great crackme with just one call its possibile to make it keygen itself</p>
			</div><div class="cleared"></div>

      <div class="reply">
         <a class="comment-reply-link" href="http://thelegendofrandom.com/blog/archives/2390?replytocom=5382#respond" onclick='return addComment.moveForm("comment-5382", "5382", "respond", "2390")'>Reply</a>       </div>
     </div>
</li>
   <li class="comment even thread-even depth-1" id="li-comment-76106">
     <div id="comment-76106">

			<div class="commentbody">
            
                <a class="gravatar">
                	<img alt="" src="2390_fichiers/ad516503a11cd5ca435acc9bb6523536.png" class="avatar avatar-60 photo avatar-default" height="60" width="60">                </a>             
            
			<cite><a href="http://malaya.com/" rel="external nofollow" class="url">tasikmalaya</a> </cite> 
						<br>
			<small class="commentmetadata"><a href="#comment-76106" title="">July 9th, 2013 on 6:00 pm</a>  </small>

			<p>the file used this method now always detected as virus by an antivirus, but loader or injector is still safe</p>
			</div><div class="cleared"></div>

      <div class="reply">
         <a class="comment-reply-link" href="http://thelegendofrandom.com/blog/archives/2390?replytocom=76106#respond" onclick='return addComment.moveForm("comment-76106", "76106", "respond", "2390")'>Reply</a>       </div>
     </div>
</li>
	</ul>
	
	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
		<div class="cleared"></div>
	</div>

	

 
<div class="clr"></div>
<div id="respond">
<h3>Leave a Reply</h3>
<div id="cancel-comment-reply">
	<small><a rel="nofollow" id="cancel-comment-reply-link" href="http://thelegendofrandom.com/blog/archives/2390#respond" style="display:none;">Click here to cancel reply.</a> </small>
</div>
 
<form action="http://thelegendofrandom.com/blog/wp-comments-post.php" method="post" id="commentform">


<p><input name="author" id="author" size="22" tabindex="1" type="text">
<label for="author"><small>Name </small></label></p>
<p><input name="email" id="email" size="22" tabindex="2" type="text">
<label for="email"><small>Mail (will not be published) </small></label></p>
<p><input name="url" id="url" size="22" tabindex="3" type="text">
<label for="url"><small>Website</small></label></p>

 <input name="comment_post_ID" value="2390" id="comment_post_ID" type="hidden">
<input name="comment_parent" id="comment_parent" value="0" type="hidden">

<!--<p><small><strong>XHTML:</strong> You can use these tags: &lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;strike&gt; &lt;strong&gt; </small></p>-->
<p><textarea name="comment" id="comment" cols="56" rows="10" tabindex="4"></textarea></p>
<p><input name="submit" id="submit" class="submitbutton" tabindex="5" value="Leave comment" type="submit">
<input name="comment_post_ID" value="2390" type="hidden">
</p>

<p style="display: none;"><input id="akismet_comment_nonce" name="akismet_comment_nonce" value="befe73aa2c" type="hidden"></p> 
</form>
</div>
 
    </div>
    <div class="bottomleftcorner"><div class="bottomrightcorner"></div></div>
</div>            
                    </div> <!-- Closes Comment -->

<div id="extrastuff">
<span id="rssleft"><a href="http://thelegendofrandom.com/blog/archives/2390/feed"><abbr title="Really Simple Syndication">RSS</abbr> feed for this post (comments)</a> </span>

<span id="trackright"> · <a href="http://thelegendofrandom.com/blog/archives/2390/trackback" rel="trackback">TrackBack <abbr title="Uniform Resource Identifier">URI</abbr></a> </span>
<div class="cleared"></div>
</div>


</div><!-- Closes Main -->


<div id="rightcol">
	<div class="roundcornrrbox">
    <div class="topleftcorner"><div class="toprightcorner"></div></div>
    <div class="roundcrrcnt">
        <!-- Optional Intro -->
                
        <!-- widget -->



<h2>Login</h2>
<form action="http://thelegendofrandom.com/blog/wp-login.php" method="post">
<input name="log" id="log" size="20" type="text">
<input name="pwd" id="pwd" size="20" type="password">
<input name="submit" value="Send" class="button" type="submit">
    <p>
       <label for="rememberme"><input name="rememberme" id="rememberme" checked="checked" value="forever" type="checkbox"> Remember me</label>
       <input name="redirect_to" value="/blog/archives/2390" type="hidden">
    </p>
</form>
<a href="http://thelegendofrandom.com/blog/wp-login.php?action=lostpassword">Recover password</a> 



        		<li id="recent-posts-2" class="sidebaritem widget_recent_entries"><div class="sidebarbox">		<h2 class="widgettitle">Recent Posts</h2>		<ul>
					<li>
				<a href="http://thelegendofrandom.com/blog/archives/2980" title="My Absence">My Absence</a> 
						</li>
					<li>
				<a href="http://thelegendofrandom.com/blog/archives/2975" title="What Are These Strange Posts?">What Are These Strange Posts?</a> 
						</li>
					<li>
				<a href="http://thelegendofrandom.com/blog/archives/2966" title="Nice Beginning Article on Reversing Android">Nice Beginning Article on Reversing Android</a> 
						</li>
					<li>
				<a href="http://thelegendofrandom.com/blog/archives/2963" title="She Is 17-years-old, She Did It Publicly In High School And While Drunk">She Is 17-years-old, She Did It Publicly In High School And While Drunk</a> 
						</li>
					<li>
				<a href="http://thelegendofrandom.com/blog/archives/2961" title="And The Most Posts Submitted In A Single Sitting Goes To…">And The Most Posts Submitted In A Single Sitting Goes To…</a> 
						</li>
				</ul>
		</div></li><li id="recent-comments-2" class="sidebaritem widget_recent_comments"><div class="sidebarbox"><h2 class="widgettitle">Recent Comments</h2><ul id="recentcomments"><li class="recentcomments">tip on <a href="http://thelegendofrandom.com/blog/archives/1722#comment-85953">A New Tutorial by Xor06 : Bypassing a Server Check</a> </li><li class="recentcomments">tip on <a href="http://thelegendofrandom.com/blog/archives/2418#comment-85946">R4ndom’s Tutorial #23: TLS Callbacks</a> </li><li class="recentcomments">C4lculated on <a href="http://thelegendofrandom.com/blog/archives/1472#comment-85945">R4ndom’s Tutorial #17: Working With Delphi Binaries</a> </li><li class="recentcomments"><a href="http://rce-loverz.tk/" rel="external nofollow" class="url">X-Programmer</a>  on <a href="http://thelegendofrandom.com/blog/archives/7#comment-85935">Tutorial #1 : What is Reverse Engineering</a> </li><li class="recentcomments">shub on <a href="http://thelegendofrandom.com/blog/archives/859#comment-85873">R4ndom’s Tutorial #9: Solution</a> </li></ul></div></li><li id="archives-2" class="sidebaritem widget_archive"><div class="sidebarbox"><h2 class="widgettitle">Archives</h2>		<ul>
			<li><a href="http://thelegendofrandom.com/blog/archives/date/2012/10" title="October 2012">October 2012</a> </li>
	<li><a href="http://thelegendofrandom.com/blog/archives/date/2012/09" title="September 2012">September 2012</a> </li>
	<li><a href="http://thelegendofrandom.com/blog/archives/date/2012/08" title="August 2012">August 2012</a> </li>
	<li><a href="http://thelegendofrandom.com/blog/archives/date/2012/07" title="July 2012">July 2012</a> </li>
	<li><a href="http://thelegendofrandom.com/blog/archives/date/2012/06" title="June 2012">June 2012</a> </li>
	<li><a href="http://thelegendofrandom.com/blog/archives/date/2012/05" title="May 2012">May 2012</a> </li>
		</ul>
</div></li><li id="categories-2" class="sidebaritem widget_categories"><div class="sidebarbox"><h2 class="widgettitle">Categories</h2>		<ul>
	<li class="cat-item cat-item-23"><a href="http://thelegendofrandom.com/blog/archives/category/beginner" title="View all posts filed under Beginner">Beginner</a> 
</li>
	<li class="cat-item cat-item-31"><a href="http://thelegendofrandom.com/blog/archives/category/challenges" title="View all posts filed under Challenges">Challenges</a> 
</li>
	<li class="cat-item cat-item-24"><a href="http://thelegendofrandom.com/blog/archives/category/intermediate" title="View all posts filed under Intermediate">Intermediate</a> 
</li>
	<li class="cat-item cat-item-32"><a href="http://thelegendofrandom.com/blog/archives/category/modifying-binaries" title="View all posts filed under Modifying Binaries">Modifying Binaries</a> 
</li>
	<li class="cat-item cat-item-25"><a href="http://thelegendofrandom.com/blog/archives/category/randoms-ramblings" title="View all posts filed under Random's Ramblings">Random's Ramblings</a> 
</li>
	<li class="cat-item cat-item-3"><a href="http://thelegendofrandom.com/blog/archives/category/reverse-engineering" title="View all posts filed under Reverse Engineering">Reverse Engineering</a> 
</li>
	<li class="cat-item cat-item-4"><a href="http://thelegendofrandom.com/blog/archives/category/tools" title="View all posts filed under Tools">Tools</a> 
</li>
	<li class="cat-item cat-item-5"><a href="http://thelegendofrandom.com/blog/archives/category/tutorials" title="View all posts filed under Tutorials">Tutorials</a> 
</li>
	<li class="cat-item cat-item-1"><a href="http://thelegendofrandom.com/blog/archives/category/uncategorized" title="View all posts filed under Uncategorized">Uncategorized</a> 
</li>
		</ul>
</div></li><li id="meta-2" class="sidebaritem widget_meta"><div class="sidebarbox"><h2 class="widgettitle">Meta</h2>			<ul>
			<li><a href="http://thelegendofrandom.com/blog/wp-login.php?action=register">Register</a> </li>			<li><a href="http://thelegendofrandom.com/blog/wp-login.php">Log in</a> </li>
			<li><a href="http://thelegendofrandom.com/blog/feed" title="Syndicate this site using RSS 2.0">Entries <abbr title="Really Simple Syndication">RSS</abbr></a> </li>
						<li><a href="http://wordpress.org/" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.org</a> </li>
						</ul>
</div></li><li id="ajax-quick-subscribe" class="sidebaritem widget_quick_subscribe"><div class="sidebarbox"><h2 class="widgettitle">Subscribe</h2>Enter your email to subscribe to future updates<div id="QSWidgetDiv" class="QSWidgetDiv"><form name="widget_quick_subscribe_form" id="widget_quick_subscribe_form"><input name="QS_user_email_widget" id="QS_user_email_widget" placeholder="email@email.com" onfocus='fadeSubmitIn("widget_qsSubmit");' onblur='fadeSubmitOut(this, "widget_qsSubmit");' onkeypress='return checkForEnter(event, "QS_user_email_widget", "QSWidgetDiv"); return false;' type="email"><input style="display:none;" value="subscribe!" id="widget_qsSubmit" class="widget_qsSubmit" onclick='submitQuickSubscribe("QS_user_email_widget", "QSWidgetDiv");' type="button"></form></div>			
			</div></li> 

        <div class="clr"></div>

    	<div id="feedbox">
            <div id="contrssbox">
                <a href="http://thelegendofrandom.com/blog/feed">RSS Feed</a> 
            </div>
        </div>
        


    </div>
    <div class="bottomleftcorner"><div class="bottomrightcorner"></div></div>
</div>
</div>
<div class="clr"></div>




    
	<div id="bottompanel">
    <div class="roundcornrrbox">
        <div class="topleftcorner"><div class="toprightcorner"></div></div>
        <div class="roundcrrcnt">
        
        	
            <div class="col1">
                
					                    <h3>Recent Posts</h3>
                    <ul>
                                                    <li>
                                <a href="http://thelegendofrandom.com/blog/archives/2980">My Absence </a> 
                            </li>
                                                    <li>
                                <a href="http://thelegendofrandom.com/blog/archives/2975">What Are These Strange Posts? </a> 
                            </li>
                                                    <li>
                                <a href="http://thelegendofrandom.com/blog/archives/2966">Nice Beginning Article on Reversing Android </a> 
                            </li>
                                                    <li>
                                <a href="http://thelegendofrandom.com/blog/archives/2963">She Is 17-years-old, She Did It Publicly In High School And While Drunk </a> 
                            </li>
                                                    <li>
                                <a href="http://thelegendofrandom.com/blog/archives/2961">And The Most Posts Submitted In A Single Sitting Goes To… </a> 
                            </li>
                        			
                    </ul>
                    

                            </div>
            
            <div class="col2">
                      
                    <h3>Archives</h3>
                    <ul>
                        	<li><a href="http://thelegendofrandom.com/blog/archives/date/2012/10" title="October 2012">October 2012</a> </li>
	<li><a href="http://thelegendofrandom.com/blog/archives/date/2012/09" title="September 2012">September 2012</a> </li>
	<li><a href="http://thelegendofrandom.com/blog/archives/date/2012/08" title="August 2012">August 2012</a> </li>
	<li><a href="http://thelegendofrandom.com/blog/archives/date/2012/07" title="July 2012">July 2012</a> </li>
	<li><a href="http://thelegendofrandom.com/blog/archives/date/2012/06" title="June 2012">June 2012</a> </li>
                    </ul>

                            </div>
            
            <div class="col3">
                                    <h3>Tags</h3>
                    <ul>
                    	<a href="http://thelegendofrandom.com/blog/archives/tag/adding-functionality" class="tag-link-29" title="1 topic" style="font-size: 8pt;">adding functionality</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/assembly-language" class="tag-link-18" title="1 topic" style="font-size: 8pt;">assembly language</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/binary" class="tag-link-26" title="1 topic" style="font-size: 8pt;">binary</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/code-cave" class="tag-link-27" title="1 topic" style="font-size: 8pt;">code cave</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/code-caves" class="tag-link-30" title="1 topic" style="font-size: 8pt;">code caves</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/cracking" class="tag-link-8" title="5 topics" style="font-size: 16pt;">cracking</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/crackme" class="tag-link-17" title="1 topic" style="font-size: 8pt;">crackme</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/ebook" class="tag-link-19" title="1 topic" style="font-size: 8pt;">ebook</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/exploting-binaries" class="tag-link-28" title="1 topic" style="font-size: 8pt;">exploting binaries</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/guide" class="tag-link-15" title="1 topic" style="font-size: 8pt;">Guide</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/olly" class="tag-link-14" title="2 topics" style="font-size: 11pt;">Olly</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/ollydbg" class="tag-link-10" title="4 topics" style="font-size: 14.666666666667pt;">ollydbg</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/olly-tutorial" class="tag-link-9" title="1 topic" style="font-size: 8pt;">olly tutorial</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/plugins" class="tag-link-11" title="1 topic" style="font-size: 8pt;">plugins</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/reverse-engineering-2" class="tag-link-7" title="3 topics" style="font-size: 13pt;">reverse engineering</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/sandbox" class="tag-link-13" title="1 topic" style="font-size: 8pt;">sandbox</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/tools" class="tag-link-4" title="1 topic" style="font-size: 8pt;">Tools</a> 
<a href="http://thelegendofrandom.com/blog/archives/tag/tutorial" class="tag-link-16" title="2 topics" style="font-size: 11pt;">tutorial</a>                     </ul>
                    
                            </div>
            <div class="clr"></div>
        

            <div class="clr"></div>
        </div>
        <div class="bottomleftcorner"><div class="bottomrightcorner"></div></div>
    </div>
</div>
<!-- Bottom Panel ends -->


	
    <div class="copyr">Copyright © 1996-2010 The Legend Of Random. All rights reserved.</div>    
    <div class="clr16"></div>
	</div>
    <div id="layoutbottom"></div>
</div>

<div id="credit" align="center">
	<abbr title="Jarrah/1.7">Jarrah</abbr> theme by <a href="http://www.templatesnext.org/">Templates Next</a>  
    | Powered by <a href="http://wordpress.org/">WordPress</a>  
</div>

<canvas style="display: none;" height="35" width="35"></canvas>


</body></html>